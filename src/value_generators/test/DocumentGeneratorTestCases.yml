---

Tests:

  # These tests use large numbers for number parameters
  # because short numbers get automatically narrowed to
  # int32s whereas number value-generators always produce
  # int64s.

  - Name: Must be mapping type
    GivenTemplate: a
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: null
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: [sequence, value]
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: []
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Simple scalar map
    GivenTemplate: {a: a}
    ThenReturns: [{a: a}, {a: a}]

  - Name: Two-key scalar map
    GivenTemplate: {a: 1, b: 2}
    ThenReturns: [{a: 1, b: 2}]

  - Name: Null scalar
    GivenTemplate: {a: null}
    ThenReturns: [{a: null}, {a: null}]

  - Name: Array without templates
    GivenTemplate: {vals: [sequence, value]}
    ThenReturns: [{vals: [sequence, value]}]

  - Name: Doubles
    GivenTemplate: {a: 3.0}
    ThenReturns: [{a: 3.0}]

  - Name: Empty arrays
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: Array of mixed-types without templates
    GivenTemplate: {a: ["foo", 2147483648]}
    ThenReturns: [{a: ["foo", 2147483648]}]

  - Name: Array of mixed-types without templates
    GivenTemplate:
      {a: [2147483648, 269849313357703264, 3.14, string, true, null]}
    ThenReturns:
      - {a: [2147483648, 269849313357703264, 3.14, string, true, null]}

  - Name: Empty array
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: one RandomInt
    GivenTemplate: {a: {^RandomInt: {min: 10000000000, max: 10000000010}}}
    ThenReturns: [{a: 10000000001}, {a: 10000000001}, {a: 10000000000}]

  - Name: two RandomInts in map
    GivenTemplate:
      a: {^RandomInt: {min: 10000000050, max: 10000000060}}
      b: {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns: [{a: 10000000050, b: 10000000033}]

  - Name: RandomInt and literal
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - 10000000010
    ThenReturns: [{a: [10000000010, 10000000010, 10000000010]}]

  - Name: RandomInt recursively applied
    GivenTemplate:
      a:
        - ^RandomInt:
            min: 10000000020
            max: {^RandomInt: {min: 10000000020, max: 10000000020}}
        - ^RandomInt:
            min: {^RandomInt: {min: 10000000020, max: 10000000020}}
            max: 10000000020
        - 10000000020
    ThenReturns: [{a: [10000000020, 10000000020, 10000000020]}]

  - Name: two RandomInts in list
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000050, max: 10000000060}}
        - {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns: [{a: [10000000059, 10000000038]}]

  - Name: Mixing ^ keys with other keys
    GivenTemplate: {a: {otherKey: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Mixing ^ other keys before
    GivenTemplate: {a: {extraKeyBefore: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Bare ^ at top-level
    GivenTemplate: {^RandomInt: {min: 50, max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Unknown expression-type
    GivenTemplate: {a: {^NonExistent: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: some kind of sub-args work fine
    GivenTemplate: {a: {min: 10000000050, max: 10000000060}}
    ThenReturns:
      - {a: {min: 10000000050, max: 10000000060}}
      - {a: {min: 10000000050, max: 10000000060}}

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: [], max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50, max: []}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: fifty, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: "7"}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: 7}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: []}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50.0, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing min
    GivenTemplate:
      a: {^RandomInt: {max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing max
    GivenTemplate:
      a: {^RandomInt: {min: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Explicit uniform distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: uniform
          min: 10000000050
          max: 10000000060
    ThenReturns:
      - {a: 10000000052}
      - {a: 10000000054}
      - {a: 10000000051}
      - {a: 10000000055}

  - Name: Explicit uniform distribution no min/max
    GivenTemplate:
      a: {^RandomInt: {distribution: uniform}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial Distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 1000000000100, p: 0.05}}
    ThenReturns:
      - {a: 49999867437}
      - {a: 50000021075}
      - {a: 50000257368}
      - {a: 50000088428}
      - {a: 49999660736}
      - {a: 50000250638}
      - {a: 50000141863}
      - {a: 50000213950}
      - {a: 50000002448}
      - {a: 49999881544}

  - Name: Binomial requires t and p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires int t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial Distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: negative_binomial
          k: 1000000000100
          p: 0.05
    ThenReturns:
      - {a: 19000032068750}
      - {a: 19000044165605}
      - {a: 19000000804896}
      - {a: 19000001700701}
      - {a: 19000013250407}
      - {a: 19000009467884}
      - {a: 18999995942719}
      - {a: 18999992778550}
      - {a: 19000025251188}
      - {a: 18999991803183}

  - Name: Negative Binomial requires k and p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires int k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Geometric distribution requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: geometric}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Poisson distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson, mean: 10000000000000}}
    ThenReturns:
      - {a: 9999997883716}
      - {a: 9999998585959}
      - {a: 9999994466398}
      - {a: 9999993316440}
      - {a: 9999998077294}
      - {a: 9999998932246}
      - {a: 10000005071779}
      - {a: 10000000476801}
      - {a: 10000002566643}
      - {a: 10000003586981}

  - Name: Poisson distribution requires mean
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: non_existent}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string
    GivenTemplate:
      a: {^RandomString: {length: 15}}
    ThenReturns:
      - {a: 0xYYXCh/YblEHcm}
      - {a: XZX/d40BxSQFMHj}
      - {a: Lkgi6+6zwnNkJy/}
      - {a: p7K4YyqevkPiYhG}
      - {a: 87QV1KsYVNJOo6a}

  - Name: Random string custom alphabet
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xyz}}
    ThenReturns:
      - {a: yzyzxxxzxxyyyyx}
      - {a: yxxyyzzxyyxzzxz}
      - {a: xzxyzzyyyyzyzzy}
      - {a: yzyyzxzxxyxxzzz}
      - {a: zxyzzzyxxxxzyzy}

  - Name: Random string custom alphabet can repeat chars
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xxx}}
    ThenReturns:
      - {a: xxxxxxxxxxxxxxx}
      - {a: xxxxxxxxxxxxxxx}

  - Name: Random string requires length
    GivenTemplate:
      a: {^RandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string requires non-empty alphabet if specified
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: ''}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string random length
    GivenTemplate:
      a:
        ^RandomString:
          length: {^RandomInt: {min: 2, max: 5}}
          alphabet: xyz
    ThenReturns:
      - {a: zzx}
      - {a: yzx}
      - {a: zy}

  - Name: FastRandom string
    GivenTemplate:
      a: {^FastRandomString: {length: 15}}
    ThenReturns:
      - {a: rqhjqANjNDtunHm}
      - {a: OpEkKLqLlDMPLMm}
      - {a: lloNJnuFmnNDAEt}
      - {a: MjOrDAIPLEMDsHt}
      - {a: LhMtJsrqKKOvlro}

  - Name: FastRandomString string requires length
    GivenTemplate:
      a: {^FastRandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FastRandomString random length
    GivenTemplate:
      a: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}
    ThenReturns:
      - {a: lD}
      - {a: kj}
      - {a: sgCO}

  - Name: Parameters blow up
    GivenTemplate:
      ^Parameter: {Default: Required, Name: Required}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Verbatim
    GivenTemplate:
      a: {^Verbatim: {^RandomInt: {min: 10000000050, max: 10000000060}}}
    ThenReturns:
      - a: {^RandomInt: {min: 10000000050, max: 10000000060}}

  - Name: Verbatim can break all the rules
    GivenTemplate:
      a:
        ^Verbatim:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}
    ThenReturns:
      - a:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}

  - Name: Verbatim as a list
    GivenTemplate:
      a:
        ^Verbatim:
          - ^RandomInt: {min: 10000000050, max: 10000000060}
          - ^RandomString: {length: 10000000015}
          - scalarValue
    ThenReturns:
      - a:
          - ^RandomInt: {min: 10000000050, max: 10000000060}
          - ^RandomString: {length: 10000000015}
          - scalarValue
