// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poplar.proto

#include "poplar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace poplar {
class PoplarIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoplarID> _instance;
} _PoplarID_default_instance_;
class CreateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOptions> _instance;
} _CreateOptions_default_instance_;
class PoplarResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoplarResponse> _instance;
} _PoplarResponse_default_instance_;
}  // namespace poplar
static void InitDefaultsscc_info_CreateOptions_poplar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_CreateOptions_default_instance_;
    new (ptr) ::poplar::CreateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::CreateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOptions_poplar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateOptions_poplar_2eproto}, {}};

static void InitDefaultsscc_info_PoplarID_poplar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_PoplarID_default_instance_;
    new (ptr) ::poplar::PoplarID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::PoplarID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoplarID_poplar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoplarID_poplar_2eproto}, {}};

static void InitDefaultsscc_info_PoplarResponse_poplar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_PoplarResponse_default_instance_;
    new (ptr) ::poplar::PoplarResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::PoplarResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoplarResponse_poplar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoplarResponse_poplar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_poplar_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_poplar_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_poplar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_poplar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarID, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, name_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, path_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, chunksize_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, streaming_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, dynamic_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, recorder_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, events_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, buffered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarResponse, name_),
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::poplar::PoplarID)},
  { 6, -1, sizeof(::poplar::CreateOptions)},
  { 19, -1, sizeof(::poplar::PoplarResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_PoplarID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_CreateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_PoplarResponse_default_instance_),
};

const char descriptor_table_protodef_poplar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014poplar.proto\022\006poplar\"\030\n\010PoplarID\022\014\n\004na"
  "me\030\001 \001(\t\"\227\005\n\rCreateOptions\022\014\n\004name\030\001 \001(\t"
  "\022\014\n\004path\030\002 \001(\t\022\021\n\tchunkSize\030\003 \001(\005\022\021\n\tstr"
  "eaming\030\004 \001(\010\022\017\n\007dynamic\030\005 \001(\010\0224\n\010recorde"
  "r\030\006 \001(\0162\".poplar.CreateOptions.RecorderT"
  "ype\0229\n\006events\030\007 \001(\0162).poplar.CreateOptio"
  "ns.EventsCollectorType\022\020\n\010buffered\030\010 \001(\010"
  "\"\265\001\n\014RecorderType\022\024\n\020UNKNOWN_RECORDER\020\000\022"
  "\010\n\004PERF\020\001\022\017\n\013PERF_SINGLE\020\002\022\016\n\nPERF_100MS"
  "\020\003\022\013\n\007PERF_1S\020\004\022\024\n\020HISTOGRAM_SINGLE\020\006\022\023\n"
  "\017HISTOGRAM_100MS\020\007\022\020\n\014HISTOGRAM_1S\020\010\022\032\n\026"
  "INTERVAL_SUMMARIZATION\020\t\"\367\001\n\023EventsColle"
  "ctorType\022\025\n\021UNKNOWN_COLLECTOR\020\000\022\t\n\005BASIC"
  "\020\001\022\017\n\013PASSTHROUGH\020\002\022\020\n\014SAMPLING_100\020\003\022\017\n"
  "\013SAMPLING_1K\020\004\022\020\n\014SAMPLING_10K\020\005\022\021\n\rSAMP"
  "LING_100K\020\006\022\024\n\020RAND_SAMPLING_50\020\007\022\024\n\020RAN"
  "D_SAMPLING_25\020\010\022\024\n\020RAND_SAMPLING_10\020\t\022\022\n"
  "\016INTERVAL_100MS\020\n\022\017\n\013INTERVAL_1S\020\013\".\n\016Po"
  "plarResponse\022\014\n\004name\030\001 \001(\t\022\016\n\006status\030\002 \001"
  "(\010B\nZ\010internalb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_poplar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_poplar_2eproto_sccs[3] = {
  &scc_info_CreateOptions_poplar_2eproto.base,
  &scc_info_PoplarID_poplar_2eproto.base,
  &scc_info_PoplarResponse_poplar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_poplar_2eproto_once;
static bool descriptor_table_poplar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_poplar_2eproto = {
  &descriptor_table_poplar_2eproto_initialized, descriptor_table_protodef_poplar_2eproto, "poplar.proto", 782,
  &descriptor_table_poplar_2eproto_once, descriptor_table_poplar_2eproto_sccs, descriptor_table_poplar_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_poplar_2eproto::offsets,
  file_level_metadata_poplar_2eproto, 3, file_level_enum_descriptors_poplar_2eproto, file_level_service_descriptors_poplar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_poplar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_poplar_2eproto), true);
namespace poplar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateOptions_RecorderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_poplar_2eproto);
  return file_level_enum_descriptors_poplar_2eproto[0];
}
bool CreateOptions_RecorderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateOptions_RecorderType CreateOptions::UNKNOWN_RECORDER;
constexpr CreateOptions_RecorderType CreateOptions::PERF;
constexpr CreateOptions_RecorderType CreateOptions::PERF_SINGLE;
constexpr CreateOptions_RecorderType CreateOptions::PERF_100MS;
constexpr CreateOptions_RecorderType CreateOptions::PERF_1S;
constexpr CreateOptions_RecorderType CreateOptions::HISTOGRAM_SINGLE;
constexpr CreateOptions_RecorderType CreateOptions::HISTOGRAM_100MS;
constexpr CreateOptions_RecorderType CreateOptions::HISTOGRAM_1S;
constexpr CreateOptions_RecorderType CreateOptions::INTERVAL_SUMMARIZATION;
constexpr CreateOptions_RecorderType CreateOptions::RecorderType_MIN;
constexpr CreateOptions_RecorderType CreateOptions::RecorderType_MAX;
constexpr int CreateOptions::RecorderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateOptions_EventsCollectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_poplar_2eproto);
  return file_level_enum_descriptors_poplar_2eproto[1];
}
bool CreateOptions_EventsCollectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateOptions_EventsCollectorType CreateOptions::UNKNOWN_COLLECTOR;
constexpr CreateOptions_EventsCollectorType CreateOptions::BASIC;
constexpr CreateOptions_EventsCollectorType CreateOptions::PASSTHROUGH;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_100;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_1K;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_10K;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_100K;
constexpr CreateOptions_EventsCollectorType CreateOptions::RAND_SAMPLING_50;
constexpr CreateOptions_EventsCollectorType CreateOptions::RAND_SAMPLING_25;
constexpr CreateOptions_EventsCollectorType CreateOptions::RAND_SAMPLING_10;
constexpr CreateOptions_EventsCollectorType CreateOptions::INTERVAL_100MS;
constexpr CreateOptions_EventsCollectorType CreateOptions::INTERVAL_1S;
constexpr CreateOptions_EventsCollectorType CreateOptions::EventsCollectorType_MIN;
constexpr CreateOptions_EventsCollectorType CreateOptions::EventsCollectorType_MAX;
constexpr int CreateOptions::EventsCollectorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PoplarID::InitAsDefaultInstance() {
}
class PoplarID::_Internal {
 public:
};

PoplarID::PoplarID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.PoplarID)
}
PoplarID::PoplarID(const PoplarID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:poplar.PoplarID)
}

void PoplarID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoplarID_poplar_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PoplarID::~PoplarID() {
  // @@protoc_insertion_point(destructor:poplar.PoplarID)
  SharedDtor();
}

void PoplarID::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PoplarID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoplarID& PoplarID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoplarID_poplar_2eproto.base);
  return *internal_default_instance();
}


void PoplarID::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.PoplarID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PoplarID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "poplar.PoplarID.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoplarID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.PoplarID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.PoplarID.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.PoplarID)
  return target;
}

size_t PoplarID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.PoplarID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoplarID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.PoplarID)
  GOOGLE_DCHECK_NE(&from, this);
  const PoplarID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoplarID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.PoplarID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.PoplarID)
    MergeFrom(*source);
  }
}

void PoplarID::MergeFrom(const PoplarID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.PoplarID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void PoplarID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.PoplarID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoplarID::CopyFrom(const PoplarID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.PoplarID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoplarID::IsInitialized() const {
  return true;
}

void PoplarID::InternalSwap(PoplarID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PoplarID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateOptions::InitAsDefaultInstance() {
}
class CreateOptions::_Internal {
 public:
};

CreateOptions::CreateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.CreateOptions)
}
CreateOptions::CreateOptions(const CreateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&chunksize_, &from.chunksize_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_) -
    reinterpret_cast<char*>(&chunksize_)) + sizeof(events_));
  // @@protoc_insertion_point(copy_constructor:poplar.CreateOptions)
}

void CreateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateOptions_poplar_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunksize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_) -
      reinterpret_cast<char*>(&chunksize_)) + sizeof(events_));
}

CreateOptions::~CreateOptions() {
  // @@protoc_insertion_point(destructor:poplar.CreateOptions)
  SharedDtor();
}

void CreateOptions::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateOptions& CreateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateOptions_poplar_2eproto.base);
  return *internal_default_instance();
}


void CreateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.CreateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunksize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_) -
      reinterpret_cast<char*>(&chunksize_)) + sizeof(events_));
  _internal_metadata_.Clear();
}

const char* CreateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "poplar.CreateOptions.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "poplar.CreateOptions.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chunkSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chunksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool streaming = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .poplar.CreateOptions.RecorderType recorder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_recorder(static_cast<::poplar::CreateOptions_RecorderType>(val));
        } else goto handle_unusual;
        continue;
      // .poplar.CreateOptions.EventsCollectorType events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_events(static_cast<::poplar::CreateOptions_EventsCollectorType>(val));
        } else goto handle_unusual;
        continue;
      // bool buffered = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          buffered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.CreateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.CreateOptions.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.CreateOptions.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // int32 chunkSize = 3;
  if (this->chunksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chunksize(), target);
  }

  // bool streaming = 4;
  if (this->streaming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_streaming(), target);
  }

  // bool dynamic = 5;
  if (this->dynamic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dynamic(), target);
  }

  // .poplar.CreateOptions.RecorderType recorder = 6;
  if (this->recorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_recorder(), target);
  }

  // .poplar.CreateOptions.EventsCollectorType events = 7;
  if (this->events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_events(), target);
  }

  // bool buffered = 8;
  if (this->buffered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_buffered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.CreateOptions)
  return target;
}

size_t CreateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.CreateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 chunkSize = 3;
  if (this->chunksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chunksize());
  }

  // bool streaming = 4;
  if (this->streaming() != 0) {
    total_size += 1 + 1;
  }

  // bool dynamic = 5;
  if (this->dynamic() != 0) {
    total_size += 1 + 1;
  }

  // bool buffered = 8;
  if (this->buffered() != 0) {
    total_size += 1 + 1;
  }

  // .poplar.CreateOptions.RecorderType recorder = 6;
  if (this->recorder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recorder());
  }

  // .poplar.CreateOptions.EventsCollectorType events = 7;
  if (this->events() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_events());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.CreateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.CreateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.CreateOptions)
    MergeFrom(*source);
  }
}

void CreateOptions::MergeFrom(const CreateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.CreateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.chunksize() != 0) {
    _internal_set_chunksize(from._internal_chunksize());
  }
  if (from.streaming() != 0) {
    _internal_set_streaming(from._internal_streaming());
  }
  if (from.dynamic() != 0) {
    _internal_set_dynamic(from._internal_dynamic());
  }
  if (from.buffered() != 0) {
    _internal_set_buffered(from._internal_buffered());
  }
  if (from.recorder() != 0) {
    _internal_set_recorder(from._internal_recorder());
  }
  if (from.events() != 0) {
    _internal_set_events(from._internal_events());
  }
}

void CreateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.CreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOptions::CopyFrom(const CreateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.CreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOptions::IsInitialized() const {
  return true;
}

void CreateOptions::InternalSwap(CreateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chunksize_, other->chunksize_);
  swap(streaming_, other->streaming_);
  swap(dynamic_, other->dynamic_);
  swap(buffered_, other->buffered_);
  swap(recorder_, other->recorder_);
  swap(events_, other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoplarResponse::InitAsDefaultInstance() {
}
class PoplarResponse::_Internal {
 public:
};

PoplarResponse::PoplarResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.PoplarResponse)
}
PoplarResponse::PoplarResponse(const PoplarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:poplar.PoplarResponse)
}

void PoplarResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoplarResponse_poplar_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

PoplarResponse::~PoplarResponse() {
  // @@protoc_insertion_point(destructor:poplar.PoplarResponse)
  SharedDtor();
}

void PoplarResponse::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PoplarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoplarResponse& PoplarResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoplarResponse_poplar_2eproto.base);
  return *internal_default_instance();
}


void PoplarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.PoplarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  _internal_metadata_.Clear();
}

const char* PoplarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "poplar.PoplarResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoplarResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.PoplarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.PoplarResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.PoplarResponse)
  return target;
}

size_t PoplarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.PoplarResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool status = 2;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoplarResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.PoplarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PoplarResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoplarResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.PoplarResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.PoplarResponse)
    MergeFrom(*source);
  }
}

void PoplarResponse::MergeFrom(const PoplarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.PoplarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PoplarResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.PoplarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoplarResponse::CopyFrom(const PoplarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.PoplarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoplarResponse::IsInitialized() const {
  return true;
}

void PoplarResponse::InternalSwap(PoplarResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoplarResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::poplar::PoplarID* Arena::CreateMaybeMessage< ::poplar::PoplarID >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::PoplarID >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::CreateOptions* Arena::CreateMaybeMessage< ::poplar::CreateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::CreateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::PoplarResponse* Arena::CreateMaybeMessage< ::poplar::PoplarResponse >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::PoplarResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
