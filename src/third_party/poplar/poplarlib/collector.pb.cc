// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#include "collector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_collector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventMetricsCounters_collector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_collector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventMetricsGauges_collector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_collector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventMetricsTimers_collector_2eproto;
namespace poplar {
class EventMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventMetrics> _instance;
} _EventMetrics_default_instance_;
class EventMetricsCountersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventMetricsCounters> _instance;
} _EventMetricsCounters_default_instance_;
class EventMetricsTimersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventMetricsTimers> _instance;
} _EventMetricsTimers_default_instance_;
class EventMetricsGaugesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventMetricsGauges> _instance;
} _EventMetricsGauges_default_instance_;
}  // namespace poplar
static void InitDefaultsscc_info_EventMetrics_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_EventMetrics_default_instance_;
    new (ptr) ::poplar::EventMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::EventMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EventMetrics_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_EventMetrics_collector_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_EventMetricsCounters_collector_2eproto.base,
      &scc_info_EventMetricsTimers_collector_2eproto.base,
      &scc_info_EventMetricsGauges_collector_2eproto.base,}};

static void InitDefaultsscc_info_EventMetricsCounters_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_EventMetricsCounters_default_instance_;
    new (ptr) ::poplar::EventMetricsCounters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::EventMetricsCounters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventMetricsCounters_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventMetricsCounters_collector_2eproto}, {}};

static void InitDefaultsscc_info_EventMetricsGauges_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_EventMetricsGauges_default_instance_;
    new (ptr) ::poplar::EventMetricsGauges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::EventMetricsGauges::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventMetricsGauges_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventMetricsGauges_collector_2eproto}, {}};

static void InitDefaultsscc_info_EventMetricsTimers_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::poplar::_EventMetricsTimers_default_instance_;
    new (ptr) ::poplar::EventMetricsTimers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::poplar::EventMetricsTimers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventMetricsTimers_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventMetricsTimers_collector_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_collector_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_collector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_collector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_collector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, name_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, time_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, id_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, counters_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, timers_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetrics, gauges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsCounters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsCounters, number_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsCounters, ops_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsCounters, size_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsCounters, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsTimers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsTimers, total_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsTimers, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsGauges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsGauges, state_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsGauges, workers_),
  PROTOBUF_FIELD_OFFSET(::poplar::EventMetricsGauges, failed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::poplar::EventMetrics)},
  { 11, -1, sizeof(::poplar::EventMetricsCounters)},
  { 20, -1, sizeof(::poplar::EventMetricsTimers)},
  { 27, -1, sizeof(::poplar::EventMetricsGauges)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_EventMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_EventMetricsCounters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_EventMetricsTimers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::poplar::_EventMetricsGauges_default_instance_),
};

const char descriptor_table_protodef_collector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017collector.proto\022\006poplar\032\014poplar.proto\032"
  "\037google/protobuf/timestamp.proto\032\036google"
  "/protobuf/duration.proto\"\332\001\n\014EventMetric"
  "s\022\014\n\004name\030\001 \001(\t\022(\n\004time\030\002 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\n\n\002id\030\003 \001(\003\022.\n\010counter"
  "s\030\004 \001(\0132\034.poplar.EventMetricsCounters\022*\n"
  "\006timers\030\005 \001(\0132\032.poplar.EventMetricsTimer"
  "s\022*\n\006gauges\030\006 \001(\0132\032.poplar.EventMetricsG"
  "auges\"Q\n\024EventMetricsCounters\022\016\n\006number\030"
  "\001 \001(\003\022\013\n\003ops\030\002 \001(\003\022\014\n\004size\030\003 \001(\003\022\016\n\006erro"
  "rs\030\004 \001(\003\"k\n\022EventMetricsTimers\022(\n\005total\030"
  "\001 \001(\0132\031.google.protobuf.Duration\022+\n\010dura"
  "tion\030\002 \001(\0132\031.google.protobuf.Duration\"D\n"
  "\022EventMetricsGauges\022\r\n\005state\030\001 \001(\003\022\017\n\007wo"
  "rkers\030\002 \001(\003\022\016\n\006failed\030\003 \001(\0102\217\002\n\024PoplarEv"
  "entCollector\022@\n\017CreateCollector\022\025.poplar"
  ".CreateOptions\032\026.poplar.PoplarResponse\0229"
  "\n\tSendEvent\022\024.poplar.EventMetrics\032\026.popl"
  "ar.PoplarResponse\022>\n\014StreamEvents\022\024.popl"
  "ar.EventMetrics\032\026.poplar.PoplarResponse("
  "\001\022:\n\016CloseCollector\022\020.poplar.PoplarID\032\026."
  "poplar.PoplarResponseB\nZ\010internalb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_collector_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_poplar_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_collector_2eproto_sccs[4] = {
  &scc_info_EventMetrics_collector_2eproto.base,
  &scc_info_EventMetricsCounters_collector_2eproto.base,
  &scc_info_EventMetricsGauges_collector_2eproto.base,
  &scc_info_EventMetricsTimers_collector_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_collector_2eproto_once;
static bool descriptor_table_collector_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collector_2eproto = {
  &descriptor_table_collector_2eproto_initialized, descriptor_table_protodef_collector_2eproto, "collector.proto", 881,
  &descriptor_table_collector_2eproto_once, descriptor_table_collector_2eproto_sccs, descriptor_table_collector_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_collector_2eproto::offsets,
  file_level_metadata_collector_2eproto, 4, file_level_enum_descriptors_collector_2eproto, file_level_service_descriptors_collector_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_collector_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_collector_2eproto), true);
namespace poplar {

// ===================================================================

void EventMetrics::InitAsDefaultInstance() {
  ::poplar::_EventMetrics_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::poplar::_EventMetrics_default_instance_._instance.get_mutable()->counters_ = const_cast< ::poplar::EventMetricsCounters*>(
      ::poplar::EventMetricsCounters::internal_default_instance());
  ::poplar::_EventMetrics_default_instance_._instance.get_mutable()->timers_ = const_cast< ::poplar::EventMetricsTimers*>(
      ::poplar::EventMetricsTimers::internal_default_instance());
  ::poplar::_EventMetrics_default_instance_._instance.get_mutable()->gauges_ = const_cast< ::poplar::EventMetricsGauges*>(
      ::poplar::EventMetricsGauges::internal_default_instance());
}
class EventMetrics::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const EventMetrics* msg);
  static const ::poplar::EventMetricsCounters& counters(const EventMetrics* msg);
  static const ::poplar::EventMetricsTimers& timers(const EventMetrics* msg);
  static const ::poplar::EventMetricsGauges& gauges(const EventMetrics* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EventMetrics::_Internal::time(const EventMetrics* msg) {
  return *msg->time_;
}
const ::poplar::EventMetricsCounters&
EventMetrics::_Internal::counters(const EventMetrics* msg) {
  return *msg->counters_;
}
const ::poplar::EventMetricsTimers&
EventMetrics::_Internal::timers(const EventMetrics* msg) {
  return *msg->timers_;
}
const ::poplar::EventMetricsGauges&
EventMetrics::_Internal::gauges(const EventMetrics* msg) {
  return *msg->gauges_;
}
void EventMetrics::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
EventMetrics::EventMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.EventMetrics)
}
EventMetrics::EventMetrics(const EventMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_counters()) {
    counters_ = new ::poplar::EventMetricsCounters(*from.counters_);
  } else {
    counters_ = nullptr;
  }
  if (from._internal_has_timers()) {
    timers_ = new ::poplar::EventMetricsTimers(*from.timers_);
  } else {
    timers_ = nullptr;
  }
  if (from._internal_has_gauges()) {
    gauges_ = new ::poplar::EventMetricsGauges(*from.gauges_);
  } else {
    gauges_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:poplar.EventMetrics)
}

void EventMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventMetrics_collector_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(id_));
}

EventMetrics::~EventMetrics() {
  // @@protoc_insertion_point(destructor:poplar.EventMetrics)
  SharedDtor();
}

void EventMetrics::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete counters_;
  if (this != internal_default_instance()) delete timers_;
  if (this != internal_default_instance()) delete gauges_;
}

void EventMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventMetrics& EventMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventMetrics_collector_2eproto.base);
  return *internal_default_instance();
}


void EventMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.EventMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gauges_ != nullptr) {
    delete gauges_;
  }
  gauges_ = nullptr;
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EventMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "poplar.EventMetrics.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .poplar.EventMetricsCounters counters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_counters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .poplar.EventMetricsTimers timers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .poplar.EventMetricsGauges gauges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gauges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.EventMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.EventMetrics.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time(this), target, stream);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // .poplar.EventMetricsCounters counters = 4;
  if (this->has_counters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::counters(this), target, stream);
  }

  // .poplar.EventMetricsTimers timers = 5;
  if (this->has_timers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timers(this), target, stream);
  }

  // .poplar.EventMetricsGauges gauges = 6;
  if (this->has_gauges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gauges(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.EventMetrics)
  return target;
}

size_t EventMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.EventMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .poplar.EventMetricsCounters counters = 4;
  if (this->has_counters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counters_);
  }

  // .poplar.EventMetricsTimers timers = 5;
  if (this->has_timers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timers_);
  }

  // .poplar.EventMetricsGauges gauges = 6;
  if (this->has_gauges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gauges_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.EventMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const EventMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.EventMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.EventMetrics)
    MergeFrom(*source);
  }
}

void EventMetrics::MergeFrom(const EventMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.EventMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.has_counters()) {
    _internal_mutable_counters()->::poplar::EventMetricsCounters::MergeFrom(from._internal_counters());
  }
  if (from.has_timers()) {
    _internal_mutable_timers()->::poplar::EventMetricsTimers::MergeFrom(from._internal_timers());
  }
  if (from.has_gauges()) {
    _internal_mutable_gauges()->::poplar::EventMetricsGauges::MergeFrom(from._internal_gauges());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void EventMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.EventMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMetrics::CopyFrom(const EventMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.EventMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetrics::IsInitialized() const {
  return true;
}

void EventMetrics::InternalSwap(EventMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(counters_, other->counters_);
  swap(timers_, other->timers_);
  swap(gauges_, other->gauges_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventMetricsCounters::InitAsDefaultInstance() {
}
class EventMetricsCounters::_Internal {
 public:
};

EventMetricsCounters::EventMetricsCounters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.EventMetricsCounters)
}
EventMetricsCounters::EventMetricsCounters(const EventMetricsCounters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&number_)) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:poplar.EventMetricsCounters)
}

void EventMetricsCounters::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&number_)) + sizeof(errors_));
}

EventMetricsCounters::~EventMetricsCounters() {
  // @@protoc_insertion_point(destructor:poplar.EventMetricsCounters)
  SharedDtor();
}

void EventMetricsCounters::SharedDtor() {
}

void EventMetricsCounters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventMetricsCounters& EventMetricsCounters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventMetricsCounters_collector_2eproto.base);
  return *internal_default_instance();
}


void EventMetricsCounters::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.EventMetricsCounters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errors_) -
      reinterpret_cast<char*>(&number_)) + sizeof(errors_));
  _internal_metadata_.Clear();
}

const char* EventMetricsCounters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventMetricsCounters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.EventMetricsCounters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_number(), target);
  }

  // int64 ops = 2;
  if (this->ops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ops(), target);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // int64 errors = 4;
  if (this->errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.EventMetricsCounters)
  return target;
}

size_t EventMetricsCounters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.EventMetricsCounters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  // int64 ops = 2;
  if (this->ops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ops());
  }

  // int64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 errors = 4;
  if (this->errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_errors());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMetricsCounters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.EventMetricsCounters)
  GOOGLE_DCHECK_NE(&from, this);
  const EventMetricsCounters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventMetricsCounters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.EventMetricsCounters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.EventMetricsCounters)
    MergeFrom(*source);
  }
}

void EventMetricsCounters::MergeFrom(const EventMetricsCounters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.EventMetricsCounters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.ops() != 0) {
    _internal_set_ops(from._internal_ops());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
}

void EventMetricsCounters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.EventMetricsCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMetricsCounters::CopyFrom(const EventMetricsCounters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.EventMetricsCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetricsCounters::IsInitialized() const {
  return true;
}

void EventMetricsCounters::InternalSwap(EventMetricsCounters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_, other->number_);
  swap(ops_, other->ops_);
  swap(size_, other->size_);
  swap(errors_, other->errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMetricsCounters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventMetricsTimers::InitAsDefaultInstance() {
  ::poplar::_EventMetricsTimers_default_instance_._instance.get_mutable()->total_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::poplar::_EventMetricsTimers_default_instance_._instance.get_mutable()->duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class EventMetricsTimers::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& total(const EventMetricsTimers* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const EventMetricsTimers* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
EventMetricsTimers::_Internal::total(const EventMetricsTimers* msg) {
  return *msg->total_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
EventMetricsTimers::_Internal::duration(const EventMetricsTimers* msg) {
  return *msg->duration_;
}
void EventMetricsTimers::clear_total() {
  if (GetArenaNoVirtual() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
}
void EventMetricsTimers::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
EventMetricsTimers::EventMetricsTimers()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.EventMetricsTimers)
}
EventMetricsTimers::EventMetricsTimers(const EventMetricsTimers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_total()) {
    total_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:poplar.EventMetricsTimers)
}

void EventMetricsTimers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventMetricsTimers_collector_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&total_)) + sizeof(duration_));
}

EventMetricsTimers::~EventMetricsTimers() {
  // @@protoc_insertion_point(destructor:poplar.EventMetricsTimers)
  SharedDtor();
}

void EventMetricsTimers::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete duration_;
}

void EventMetricsTimers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventMetricsTimers& EventMetricsTimers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventMetricsTimers_collector_2eproto.base);
  return *internal_default_instance();
}


void EventMetricsTimers::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.EventMetricsTimers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EventMetricsTimers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventMetricsTimers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.EventMetricsTimers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration total = 1;
  if (this->has_total()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::total(this), target, stream);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.EventMetricsTimers)
  return target;
}

size_t EventMetricsTimers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.EventMetricsTimers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration total = 1;
  if (this->has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMetricsTimers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.EventMetricsTimers)
  GOOGLE_DCHECK_NE(&from, this);
  const EventMetricsTimers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventMetricsTimers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.EventMetricsTimers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.EventMetricsTimers)
    MergeFrom(*source);
  }
}

void EventMetricsTimers::MergeFrom(const EventMetricsTimers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.EventMetricsTimers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total()) {
    _internal_mutable_total()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_total());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
}

void EventMetricsTimers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.EventMetricsTimers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMetricsTimers::CopyFrom(const EventMetricsTimers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.EventMetricsTimers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetricsTimers::IsInitialized() const {
  return true;
}

void EventMetricsTimers::InternalSwap(EventMetricsTimers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(total_, other->total_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMetricsTimers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventMetricsGauges::InitAsDefaultInstance() {
}
class EventMetricsGauges::_Internal {
 public:
};

EventMetricsGauges::EventMetricsGauges()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poplar.EventMetricsGauges)
}
EventMetricsGauges::EventMetricsGauges(const EventMetricsGauges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_) -
    reinterpret_cast<char*>(&state_)) + sizeof(failed_));
  // @@protoc_insertion_point(copy_constructor:poplar.EventMetricsGauges)
}

void EventMetricsGauges::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_) -
      reinterpret_cast<char*>(&state_)) + sizeof(failed_));
}

EventMetricsGauges::~EventMetricsGauges() {
  // @@protoc_insertion_point(destructor:poplar.EventMetricsGauges)
  SharedDtor();
}

void EventMetricsGauges::SharedDtor() {
}

void EventMetricsGauges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventMetricsGauges& EventMetricsGauges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventMetricsGauges_collector_2eproto.base);
  return *internal_default_instance();
}


void EventMetricsGauges::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.EventMetricsGauges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_) -
      reinterpret_cast<char*>(&state_)) + sizeof(failed_));
  _internal_metadata_.Clear();
}

const char* EventMetricsGauges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 workers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool failed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventMetricsGauges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.EventMetricsGauges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_state(), target);
  }

  // int64 workers = 2;
  if (this->workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_workers(), target);
  }

  // bool failed = 3;
  if (this->failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.EventMetricsGauges)
  return target;
}

size_t EventMetricsGauges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.EventMetricsGauges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_state());
  }

  // int64 workers = 2;
  if (this->workers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_workers());
  }

  // bool failed = 3;
  if (this->failed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMetricsGauges::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:poplar.EventMetricsGauges)
  GOOGLE_DCHECK_NE(&from, this);
  const EventMetricsGauges* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventMetricsGauges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:poplar.EventMetricsGauges)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:poplar.EventMetricsGauges)
    MergeFrom(*source);
  }
}

void EventMetricsGauges::MergeFrom(const EventMetricsGauges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:poplar.EventMetricsGauges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.workers() != 0) {
    _internal_set_workers(from._internal_workers());
  }
  if (from.failed() != 0) {
    _internal_set_failed(from._internal_failed());
  }
}

void EventMetricsGauges::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:poplar.EventMetricsGauges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMetricsGauges::CopyFrom(const EventMetricsGauges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.EventMetricsGauges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetricsGauges::IsInitialized() const {
  return true;
}

void EventMetricsGauges::InternalSwap(EventMetricsGauges* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(workers_, other->workers_);
  swap(failed_, other->failed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMetricsGauges::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::poplar::EventMetrics* Arena::CreateMaybeMessage< ::poplar::EventMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::EventMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::EventMetricsCounters* Arena::CreateMaybeMessage< ::poplar::EventMetricsCounters >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::EventMetricsCounters >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::EventMetricsTimers* Arena::CreateMaybeMessage< ::poplar::EventMetricsTimers >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::EventMetricsTimers >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::EventMetricsGauges* Arena::CreateMaybeMessage< ::poplar::EventMetricsGauges >(Arena* arena) {
  return Arena::CreateInternal< ::poplar::EventMetricsGauges >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
