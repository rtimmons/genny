// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "poplar.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collector_2eproto;
namespace poplar {
class EventMetrics;
class EventMetricsDefaultTypeInternal;
extern EventMetricsDefaultTypeInternal _EventMetrics_default_instance_;
class EventMetricsCounters;
class EventMetricsCountersDefaultTypeInternal;
extern EventMetricsCountersDefaultTypeInternal _EventMetricsCounters_default_instance_;
class EventMetricsGauges;
class EventMetricsGaugesDefaultTypeInternal;
extern EventMetricsGaugesDefaultTypeInternal _EventMetricsGauges_default_instance_;
class EventMetricsTimers;
class EventMetricsTimersDefaultTypeInternal;
extern EventMetricsTimersDefaultTypeInternal _EventMetricsTimers_default_instance_;
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> ::poplar::EventMetrics* Arena::CreateMaybeMessage<::poplar::EventMetrics>(Arena*);
template<> ::poplar::EventMetricsCounters* Arena::CreateMaybeMessage<::poplar::EventMetricsCounters>(Arena*);
template<> ::poplar::EventMetricsGauges* Arena::CreateMaybeMessage<::poplar::EventMetricsGauges>(Arena*);
template<> ::poplar::EventMetricsTimers* Arena::CreateMaybeMessage<::poplar::EventMetricsTimers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace poplar {

// ===================================================================

class EventMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetrics) */ {
 public:
  EventMetrics();
  virtual ~EventMetrics();

  EventMetrics(const EventMetrics& from);
  EventMetrics(EventMetrics&& from) noexcept
    : EventMetrics() {
    *this = ::std::move(from);
  }

  inline EventMetrics& operator=(const EventMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetrics& operator=(EventMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMetrics* internal_default_instance() {
    return reinterpret_cast<const EventMetrics*>(
               &_EventMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventMetrics& a, EventMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventMetrics* New() const final {
    return CreateMaybeMessage<EventMetrics>(nullptr);
  }

  EventMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventMetrics& from);
  void MergeFrom(const EventMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
    kCountersFieldNumber = 4,
    kTimersFieldNumber = 5,
    kGaugesFieldNumber = 6,
    kIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:

  // .poplar.EventMetricsCounters counters = 4;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::poplar::EventMetricsCounters& counters() const;
  ::poplar::EventMetricsCounters* release_counters();
  ::poplar::EventMetricsCounters* mutable_counters();
  void set_allocated_counters(::poplar::EventMetricsCounters* counters);
  private:
  const ::poplar::EventMetricsCounters& _internal_counters() const;
  ::poplar::EventMetricsCounters* _internal_mutable_counters();
  public:

  // .poplar.EventMetricsTimers timers = 5;
  bool has_timers() const;
  private:
  bool _internal_has_timers() const;
  public:
  void clear_timers();
  const ::poplar::EventMetricsTimers& timers() const;
  ::poplar::EventMetricsTimers* release_timers();
  ::poplar::EventMetricsTimers* mutable_timers();
  void set_allocated_timers(::poplar::EventMetricsTimers* timers);
  private:
  const ::poplar::EventMetricsTimers& _internal_timers() const;
  ::poplar::EventMetricsTimers* _internal_mutable_timers();
  public:

  // .poplar.EventMetricsGauges gauges = 6;
  bool has_gauges() const;
  private:
  bool _internal_has_gauges() const;
  public:
  void clear_gauges();
  const ::poplar::EventMetricsGauges& gauges() const;
  ::poplar::EventMetricsGauges* release_gauges();
  ::poplar::EventMetricsGauges* mutable_gauges();
  void set_allocated_gauges(::poplar::EventMetricsGauges* gauges);
  private:
  const ::poplar::EventMetricsGauges& _internal_gauges() const;
  ::poplar::EventMetricsGauges* _internal_mutable_gauges();
  public:

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::poplar::EventMetricsCounters* counters_;
  ::poplar::EventMetricsTimers* timers_;
  ::poplar::EventMetricsGauges* gauges_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetricsCounters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetricsCounters) */ {
 public:
  EventMetricsCounters();
  virtual ~EventMetricsCounters();

  EventMetricsCounters(const EventMetricsCounters& from);
  EventMetricsCounters(EventMetricsCounters&& from) noexcept
    : EventMetricsCounters() {
    *this = ::std::move(from);
  }

  inline EventMetricsCounters& operator=(const EventMetricsCounters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetricsCounters& operator=(EventMetricsCounters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventMetricsCounters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMetricsCounters* internal_default_instance() {
    return reinterpret_cast<const EventMetricsCounters*>(
               &_EventMetricsCounters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventMetricsCounters& a, EventMetricsCounters& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetricsCounters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventMetricsCounters* New() const final {
    return CreateMaybeMessage<EventMetricsCounters>(nullptr);
  }

  EventMetricsCounters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventMetricsCounters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventMetricsCounters& from);
  void MergeFrom(const EventMetricsCounters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetricsCounters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetricsCounters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kOpsFieldNumber = 2,
    kSizeFieldNumber = 3,
    kErrorsFieldNumber = 4,
  };
  // int64 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ops = 2;
  void clear_ops();
  ::PROTOBUF_NAMESPACE_ID::int64 ops() const;
  void set_ops(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ops() const;
  void _internal_set_ops(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 errors = 4;
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::int64 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errors() const;
  void _internal_set_errors(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetricsCounters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  ::PROTOBUF_NAMESPACE_ID::int64 ops_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetricsTimers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetricsTimers) */ {
 public:
  EventMetricsTimers();
  virtual ~EventMetricsTimers();

  EventMetricsTimers(const EventMetricsTimers& from);
  EventMetricsTimers(EventMetricsTimers&& from) noexcept
    : EventMetricsTimers() {
    *this = ::std::move(from);
  }

  inline EventMetricsTimers& operator=(const EventMetricsTimers& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetricsTimers& operator=(EventMetricsTimers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventMetricsTimers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMetricsTimers* internal_default_instance() {
    return reinterpret_cast<const EventMetricsTimers*>(
               &_EventMetricsTimers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventMetricsTimers& a, EventMetricsTimers& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetricsTimers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventMetricsTimers* New() const final {
    return CreateMaybeMessage<EventMetricsTimers>(nullptr);
  }

  EventMetricsTimers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventMetricsTimers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventMetricsTimers& from);
  void MergeFrom(const EventMetricsTimers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetricsTimers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetricsTimers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // .google.protobuf.Duration total = 1;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  const PROTOBUF_NAMESPACE_ID::Duration& total() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_total();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_total();
  void set_allocated_total(PROTOBUF_NAMESPACE_ID::Duration* total);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_total() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total();
  public:

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetricsTimers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Duration* total_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetricsGauges :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetricsGauges) */ {
 public:
  EventMetricsGauges();
  virtual ~EventMetricsGauges();

  EventMetricsGauges(const EventMetricsGauges& from);
  EventMetricsGauges(EventMetricsGauges&& from) noexcept
    : EventMetricsGauges() {
    *this = ::std::move(from);
  }

  inline EventMetricsGauges& operator=(const EventMetricsGauges& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetricsGauges& operator=(EventMetricsGauges&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventMetricsGauges& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMetricsGauges* internal_default_instance() {
    return reinterpret_cast<const EventMetricsGauges*>(
               &_EventMetricsGauges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventMetricsGauges& a, EventMetricsGauges& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetricsGauges* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventMetricsGauges* New() const final {
    return CreateMaybeMessage<EventMetricsGauges>(nullptr);
  }

  EventMetricsGauges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventMetricsGauges>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventMetricsGauges& from);
  void MergeFrom(const EventMetricsGauges& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetricsGauges* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetricsGauges";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kWorkersFieldNumber = 2,
    kFailedFieldNumber = 3,
  };
  // int64 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 workers = 2;
  void clear_workers();
  ::PROTOBUF_NAMESPACE_ID::int64 workers() const;
  void set_workers(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_workers() const;
  void _internal_set_workers(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool failed = 3;
  void clear_failed();
  bool failed() const;
  void set_failed(bool value);
  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetricsGauges)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  ::PROTOBUF_NAMESPACE_ID::int64 workers_;
  bool failed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventMetrics

// string name = 1;
inline void EventMetrics::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventMetrics::name() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.name)
  return _internal_name();
}
inline void EventMetrics::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetrics.name)
}
inline std::string* EventMetrics::mutable_name() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.name)
  return _internal_mutable_name();
}
inline const std::string& EventMetrics::_internal_name() const {
  return name_.GetNoArena();
}
inline void EventMetrics::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EventMetrics::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poplar.EventMetrics.name)
}
inline void EventMetrics::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poplar.EventMetrics.name)
}
inline void EventMetrics::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poplar.EventMetrics.name)
}
inline std::string* EventMetrics::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventMetrics::release_name() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventMetrics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.name)
}

// .google.protobuf.Timestamp time = 2;
inline bool EventMetrics::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool EventMetrics::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventMetrics::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EventMetrics::time() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.time)
  return _internal_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::release_time() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::mutable_time() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.time)
  return _internal_mutable_time();
}
inline void EventMetrics::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.time)
}

// int64 id = 3;
inline void EventMetrics::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetrics::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetrics::id() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.id)
  return _internal_id();
}
inline void EventMetrics::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void EventMetrics::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetrics.id)
}

// .poplar.EventMetricsCounters counters = 4;
inline bool EventMetrics::_internal_has_counters() const {
  return this != internal_default_instance() && counters_ != nullptr;
}
inline bool EventMetrics::has_counters() const {
  return _internal_has_counters();
}
inline void EventMetrics::clear_counters() {
  if (GetArenaNoVirtual() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
}
inline const ::poplar::EventMetricsCounters& EventMetrics::_internal_counters() const {
  const ::poplar::EventMetricsCounters* p = counters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::poplar::EventMetricsCounters*>(
      &::poplar::_EventMetricsCounters_default_instance_);
}
inline const ::poplar::EventMetricsCounters& EventMetrics::counters() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.counters)
  return _internal_counters();
}
inline ::poplar::EventMetricsCounters* EventMetrics::release_counters() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.counters)
  
  ::poplar::EventMetricsCounters* temp = counters_;
  counters_ = nullptr;
  return temp;
}
inline ::poplar::EventMetricsCounters* EventMetrics::_internal_mutable_counters() {
  
  if (counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::poplar::EventMetricsCounters>(GetArenaNoVirtual());
    counters_ = p;
  }
  return counters_;
}
inline ::poplar::EventMetricsCounters* EventMetrics::mutable_counters() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.counters)
  return _internal_mutable_counters();
}
inline void EventMetrics::set_allocated_counters(::poplar::EventMetricsCounters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.counters)
}

// .poplar.EventMetricsTimers timers = 5;
inline bool EventMetrics::_internal_has_timers() const {
  return this != internal_default_instance() && timers_ != nullptr;
}
inline bool EventMetrics::has_timers() const {
  return _internal_has_timers();
}
inline void EventMetrics::clear_timers() {
  if (GetArenaNoVirtual() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
}
inline const ::poplar::EventMetricsTimers& EventMetrics::_internal_timers() const {
  const ::poplar::EventMetricsTimers* p = timers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::poplar::EventMetricsTimers*>(
      &::poplar::_EventMetricsTimers_default_instance_);
}
inline const ::poplar::EventMetricsTimers& EventMetrics::timers() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.timers)
  return _internal_timers();
}
inline ::poplar::EventMetricsTimers* EventMetrics::release_timers() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.timers)
  
  ::poplar::EventMetricsTimers* temp = timers_;
  timers_ = nullptr;
  return temp;
}
inline ::poplar::EventMetricsTimers* EventMetrics::_internal_mutable_timers() {
  
  if (timers_ == nullptr) {
    auto* p = CreateMaybeMessage<::poplar::EventMetricsTimers>(GetArenaNoVirtual());
    timers_ = p;
  }
  return timers_;
}
inline ::poplar::EventMetricsTimers* EventMetrics::mutable_timers() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.timers)
  return _internal_mutable_timers();
}
inline void EventMetrics::set_allocated_timers(::poplar::EventMetricsTimers* timers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timers_;
  }
  if (timers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timers, submessage_arena);
    }
    
  } else {
    
  }
  timers_ = timers;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.timers)
}

// .poplar.EventMetricsGauges gauges = 6;
inline bool EventMetrics::_internal_has_gauges() const {
  return this != internal_default_instance() && gauges_ != nullptr;
}
inline bool EventMetrics::has_gauges() const {
  return _internal_has_gauges();
}
inline void EventMetrics::clear_gauges() {
  if (GetArenaNoVirtual() == nullptr && gauges_ != nullptr) {
    delete gauges_;
  }
  gauges_ = nullptr;
}
inline const ::poplar::EventMetricsGauges& EventMetrics::_internal_gauges() const {
  const ::poplar::EventMetricsGauges* p = gauges_;
  return p != nullptr ? *p : *reinterpret_cast<const ::poplar::EventMetricsGauges*>(
      &::poplar::_EventMetricsGauges_default_instance_);
}
inline const ::poplar::EventMetricsGauges& EventMetrics::gauges() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.gauges)
  return _internal_gauges();
}
inline ::poplar::EventMetricsGauges* EventMetrics::release_gauges() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.gauges)
  
  ::poplar::EventMetricsGauges* temp = gauges_;
  gauges_ = nullptr;
  return temp;
}
inline ::poplar::EventMetricsGauges* EventMetrics::_internal_mutable_gauges() {
  
  if (gauges_ == nullptr) {
    auto* p = CreateMaybeMessage<::poplar::EventMetricsGauges>(GetArenaNoVirtual());
    gauges_ = p;
  }
  return gauges_;
}
inline ::poplar::EventMetricsGauges* EventMetrics::mutable_gauges() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.gauges)
  return _internal_mutable_gauges();
}
inline void EventMetrics::set_allocated_gauges(::poplar::EventMetricsGauges* gauges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gauges_;
  }
  if (gauges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gauges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauges, submessage_arena);
    }
    
  } else {
    
  }
  gauges_ = gauges;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.gauges)
}

// -------------------------------------------------------------------

// EventMetricsCounters

// int64 number = 1;
inline void EventMetricsCounters::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::number() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.number)
  return _internal_number();
}
inline void EventMetricsCounters::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
}
inline void EventMetricsCounters::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.number)
}

// int64 ops = 2;
inline void EventMetricsCounters::clear_ops() {
  ops_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::_internal_ops() const {
  return ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::ops() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.ops)
  return _internal_ops();
}
inline void EventMetricsCounters::_internal_set_ops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ops_ = value;
}
inline void EventMetricsCounters::set_ops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ops(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.ops)
}

// int64 size = 3;
inline void EventMetricsCounters::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::size() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.size)
  return _internal_size();
}
inline void EventMetricsCounters::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void EventMetricsCounters::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.size)
}

// int64 errors = 4;
inline void EventMetricsCounters::clear_errors() {
  errors_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::_internal_errors() const {
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsCounters::errors() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.errors)
  return _internal_errors();
}
inline void EventMetricsCounters::_internal_set_errors(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  errors_ = value;
}
inline void EventMetricsCounters::set_errors(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.errors)
}

// -------------------------------------------------------------------

// EventMetricsTimers

// .google.protobuf.Duration total = 1;
inline bool EventMetricsTimers::_internal_has_total() const {
  return this != internal_default_instance() && total_ != nullptr;
}
inline bool EventMetricsTimers::has_total() const {
  return _internal_has_total();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::_internal_total() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = total_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::total() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsTimers.total)
  return _internal_total();
}
inline PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::release_total() {
  // @@protoc_insertion_point(field_release:poplar.EventMetricsTimers.total)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = total_;
  total_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::_internal_mutable_total() {
  
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    total_ = p;
  }
  return total_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::mutable_total() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetricsTimers.total)
  return _internal_mutable_total();
}
inline void EventMetricsTimers::set_allocated_total(PROTOBUF_NAMESPACE_ID::Duration* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_);
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total)->GetArena();
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    
  } else {
    
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetricsTimers.total)
}

// .google.protobuf.Duration duration = 2;
inline bool EventMetricsTimers::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool EventMetricsTimers::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::duration() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsTimers.duration)
  return _internal_duration();
}
inline PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::release_duration() {
  // @@protoc_insertion_point(field_release:poplar.EventMetricsTimers.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:poplar.EventMetricsTimers.duration)
  return _internal_mutable_duration();
}
inline void EventMetricsTimers::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetricsTimers.duration)
}

// -------------------------------------------------------------------

// EventMetricsGauges

// int64 state = 1;
inline void EventMetricsGauges::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsGauges::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsGauges::state() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsGauges.state)
  return _internal_state();
}
inline void EventMetricsGauges::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  state_ = value;
}
inline void EventMetricsGauges::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsGauges.state)
}

// int64 workers = 2;
inline void EventMetricsGauges::clear_workers() {
  workers_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsGauges::_internal_workers() const {
  return workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetricsGauges::workers() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsGauges.workers)
  return _internal_workers();
}
inline void EventMetricsGauges::_internal_set_workers(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  workers_ = value;
}
inline void EventMetricsGauges::set_workers(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_workers(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsGauges.workers)
}

// bool failed = 3;
inline void EventMetricsGauges::clear_failed() {
  failed_ = false;
}
inline bool EventMetricsGauges::_internal_failed() const {
  return failed_;
}
inline bool EventMetricsGauges::failed() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsGauges.failed)
  return _internal_failed();
}
inline void EventMetricsGauges::_internal_set_failed(bool value) {
  
  failed_ = value;
}
inline void EventMetricsGauges::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsGauges.failed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poplar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
