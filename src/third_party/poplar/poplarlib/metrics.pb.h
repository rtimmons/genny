// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "poplar.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metrics_2eproto;
namespace poplar {
class IntervalSummary;
class IntervalSummaryDefaultTypeInternal;
extern IntervalSummaryDefaultTypeInternal _IntervalSummary_default_instance_;
class SummaryDouble;
class SummaryDoubleDefaultTypeInternal;
extern SummaryDoubleDefaultTypeInternal _SummaryDouble_default_instance_;
class SummaryDoubleSlice;
class SummaryDoubleSliceDefaultTypeInternal;
extern SummaryDoubleSliceDefaultTypeInternal _SummaryDoubleSlice_default_instance_;
class SummaryInteger;
class SummaryIntegerDefaultTypeInternal;
extern SummaryIntegerDefaultTypeInternal _SummaryInteger_default_instance_;
class SummaryIntegerSlice;
class SummaryIntegerSliceDefaultTypeInternal;
extern SummaryIntegerSliceDefaultTypeInternal _SummaryIntegerSlice_default_instance_;
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> ::poplar::IntervalSummary* Arena::CreateMaybeMessage<::poplar::IntervalSummary>(Arena*);
template<> ::poplar::SummaryDouble* Arena::CreateMaybeMessage<::poplar::SummaryDouble>(Arena*);
template<> ::poplar::SummaryDoubleSlice* Arena::CreateMaybeMessage<::poplar::SummaryDoubleSlice>(Arena*);
template<> ::poplar::SummaryInteger* Arena::CreateMaybeMessage<::poplar::SummaryInteger>(Arena*);
template<> ::poplar::SummaryIntegerSlice* Arena::CreateMaybeMessage<::poplar::SummaryIntegerSlice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace poplar {

// ===================================================================

class IntervalSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.IntervalSummary) */ {
 public:
  IntervalSummary();
  virtual ~IntervalSummary();

  IntervalSummary(const IntervalSummary& from);
  IntervalSummary(IntervalSummary&& from) noexcept
    : IntervalSummary() {
    *this = ::std::move(from);
  }

  inline IntervalSummary& operator=(const IntervalSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalSummary& operator=(IntervalSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntervalSummary& default_instance();

  enum ValueCase {
    kNumber = 2,
    kNumberValues = 3,
    kPoint = 4,
    kPointValues = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntervalSummary* internal_default_instance() {
    return reinterpret_cast<const IntervalSummary*>(
               &_IntervalSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntervalSummary& a, IntervalSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntervalSummary* New() const final {
    return CreateMaybeMessage<IntervalSummary>(nullptr);
  }

  IntervalSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntervalSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntervalSummary& from);
  void MergeFrom(const IntervalSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.IntervalSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorFieldNumber = 1,
    kNumberFieldNumber = 2,
    kNumberValuesFieldNumber = 3,
    kPointFieldNumber = 4,
    kPointValuesFieldNumber = 5,
  };
  // string collector = 1;
  void clear_collector();
  const std::string& collector() const;
  void set_collector(const std::string& value);
  void set_collector(std::string&& value);
  void set_collector(const char* value);
  void set_collector(const char* value, size_t size);
  std::string* mutable_collector();
  std::string* release_collector();
  void set_allocated_collector(std::string* collector);
  private:
  const std::string& _internal_collector() const;
  void _internal_set_collector(const std::string& value);
  std::string* _internal_mutable_collector();
  public:

  // .poplar.SummaryInteger number = 2;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  const ::poplar::SummaryInteger& number() const;
  ::poplar::SummaryInteger* release_number();
  ::poplar::SummaryInteger* mutable_number();
  void set_allocated_number(::poplar::SummaryInteger* number);
  private:
  const ::poplar::SummaryInteger& _internal_number() const;
  ::poplar::SummaryInteger* _internal_mutable_number();
  public:

  // .poplar.SummaryIntegerSlice number_values = 3;
  bool has_number_values() const;
  private:
  bool _internal_has_number_values() const;
  public:
  void clear_number_values();
  const ::poplar::SummaryIntegerSlice& number_values() const;
  ::poplar::SummaryIntegerSlice* release_number_values();
  ::poplar::SummaryIntegerSlice* mutable_number_values();
  void set_allocated_number_values(::poplar::SummaryIntegerSlice* number_values);
  private:
  const ::poplar::SummaryIntegerSlice& _internal_number_values() const;
  ::poplar::SummaryIntegerSlice* _internal_mutable_number_values();
  public:

  // .poplar.SummaryDouble point = 4;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::poplar::SummaryDouble& point() const;
  ::poplar::SummaryDouble* release_point();
  ::poplar::SummaryDouble* mutable_point();
  void set_allocated_point(::poplar::SummaryDouble* point);
  private:
  const ::poplar::SummaryDouble& _internal_point() const;
  ::poplar::SummaryDouble* _internal_mutable_point();
  public:

  // .poplar.SummaryDoubleSlice point_values = 5;
  bool has_point_values() const;
  private:
  bool _internal_has_point_values() const;
  public:
  void clear_point_values();
  const ::poplar::SummaryDoubleSlice& point_values() const;
  ::poplar::SummaryDoubleSlice* release_point_values();
  ::poplar::SummaryDoubleSlice* mutable_point_values();
  void set_allocated_point_values(::poplar::SummaryDoubleSlice* point_values);
  private:
  const ::poplar::SummaryDoubleSlice& _internal_point_values() const;
  ::poplar::SummaryDoubleSlice* _internal_mutable_point_values();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:poplar.IntervalSummary)
 private:
  class _Internal;
  void set_has_number();
  void set_has_number_values();
  void set_has_point();
  void set_has_point_values();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collector_;
  union ValueUnion {
    ValueUnion() {}
    ::poplar::SummaryInteger* number_;
    ::poplar::SummaryIntegerSlice* number_values_;
    ::poplar::SummaryDouble* point_;
    ::poplar::SummaryDoubleSlice* point_values_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryIntegerSlice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryIntegerSlice) */ {
 public:
  SummaryIntegerSlice();
  virtual ~SummaryIntegerSlice();

  SummaryIntegerSlice(const SummaryIntegerSlice& from);
  SummaryIntegerSlice(SummaryIntegerSlice&& from) noexcept
    : SummaryIntegerSlice() {
    *this = ::std::move(from);
  }

  inline SummaryIntegerSlice& operator=(const SummaryIntegerSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryIntegerSlice& operator=(SummaryIntegerSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryIntegerSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryIntegerSlice* internal_default_instance() {
    return reinterpret_cast<const SummaryIntegerSlice*>(
               &_SummaryIntegerSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SummaryIntegerSlice& a, SummaryIntegerSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryIntegerSlice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryIntegerSlice* New() const final {
    return CreateMaybeMessage<SummaryIntegerSlice>(nullptr);
  }

  SummaryIntegerSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryIntegerSlice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryIntegerSlice& from);
  void MergeFrom(const SummaryIntegerSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryIntegerSlice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryIntegerSlice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated int64 value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryIntegerSlice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryInteger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryInteger) */ {
 public:
  SummaryInteger();
  virtual ~SummaryInteger();

  SummaryInteger(const SummaryInteger& from);
  SummaryInteger(SummaryInteger&& from) noexcept
    : SummaryInteger() {
    *this = ::std::move(from);
  }

  inline SummaryInteger& operator=(const SummaryInteger& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryInteger& operator=(SummaryInteger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryInteger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryInteger* internal_default_instance() {
    return reinterpret_cast<const SummaryInteger*>(
               &_SummaryInteger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SummaryInteger& a, SummaryInteger& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryInteger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryInteger* New() const final {
    return CreateMaybeMessage<SummaryInteger>(nullptr);
  }

  SummaryInteger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryInteger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryInteger& from);
  void MergeFrom(const SummaryInteger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryInteger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryInteger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryInteger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDoubleSlice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryDoubleSlice) */ {
 public:
  SummaryDoubleSlice();
  virtual ~SummaryDoubleSlice();

  SummaryDoubleSlice(const SummaryDoubleSlice& from);
  SummaryDoubleSlice(SummaryDoubleSlice&& from) noexcept
    : SummaryDoubleSlice() {
    *this = ::std::move(from);
  }

  inline SummaryDoubleSlice& operator=(const SummaryDoubleSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDoubleSlice& operator=(SummaryDoubleSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryDoubleSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryDoubleSlice* internal_default_instance() {
    return reinterpret_cast<const SummaryDoubleSlice*>(
               &_SummaryDoubleSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SummaryDoubleSlice& a, SummaryDoubleSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryDoubleSlice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryDoubleSlice* New() const final {
    return CreateMaybeMessage<SummaryDoubleSlice>(nullptr);
  }

  SummaryDoubleSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryDoubleSlice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryDoubleSlice& from);
  void MergeFrom(const SummaryDoubleSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryDoubleSlice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryDoubleSlice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated double value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryDoubleSlice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDouble :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryDouble) */ {
 public:
  SummaryDouble();
  virtual ~SummaryDouble();

  SummaryDouble(const SummaryDouble& from);
  SummaryDouble(SummaryDouble&& from) noexcept
    : SummaryDouble() {
    *this = ::std::move(from);
  }

  inline SummaryDouble& operator=(const SummaryDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDouble& operator=(SummaryDouble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryDouble* internal_default_instance() {
    return reinterpret_cast<const SummaryDouble*>(
               &_SummaryDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SummaryDouble& a, SummaryDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryDouble* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryDouble* New() const final {
    return CreateMaybeMessage<SummaryDouble>(nullptr);
  }

  SummaryDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryDouble& from);
  void MergeFrom(const SummaryDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryDouble";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_metrics_2eproto);
    return ::descriptor_table_metrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryDouble)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntervalSummary

// string collector = 1;
inline void IntervalSummary::clear_collector() {
  collector_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IntervalSummary::collector() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.collector)
  return _internal_collector();
}
inline void IntervalSummary::set_collector(const std::string& value) {
  _internal_set_collector(value);
  // @@protoc_insertion_point(field_set:poplar.IntervalSummary.collector)
}
inline std::string* IntervalSummary::mutable_collector() {
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.collector)
  return _internal_mutable_collector();
}
inline const std::string& IntervalSummary::_internal_collector() const {
  return collector_.GetNoArena();
}
inline void IntervalSummary::_internal_set_collector(const std::string& value) {
  
  collector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IntervalSummary::set_collector(std::string&& value) {
  
  collector_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poplar.IntervalSummary.collector)
}
inline void IntervalSummary::set_collector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poplar.IntervalSummary.collector)
}
inline void IntervalSummary::set_collector(const char* value, size_t size) {
  
  collector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poplar.IntervalSummary.collector)
}
inline std::string* IntervalSummary::_internal_mutable_collector() {
  
  return collector_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntervalSummary::release_collector() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.collector)
  
  return collector_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntervalSummary::set_allocated_collector(std::string* collector) {
  if (collector != nullptr) {
    
  } else {
    
  }
  collector_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collector);
  // @@protoc_insertion_point(field_set_allocated:poplar.IntervalSummary.collector)
}

// .poplar.SummaryInteger number = 2;
inline bool IntervalSummary::_internal_has_number() const {
  return value_case() == kNumber;
}
inline bool IntervalSummary::has_number() const {
  return _internal_has_number();
}
inline void IntervalSummary::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void IntervalSummary::clear_number() {
  if (_internal_has_number()) {
    delete value_.number_;
    clear_has_value();
  }
}
inline ::poplar::SummaryInteger* IntervalSummary::release_number() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.number)
  if (_internal_has_number()) {
    clear_has_value();
      ::poplar::SummaryInteger* temp = value_.number_;
    value_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryInteger& IntervalSummary::_internal_number() const {
  return _internal_has_number()
      ? *value_.number_
      : *reinterpret_cast< ::poplar::SummaryInteger*>(&::poplar::_SummaryInteger_default_instance_);
}
inline const ::poplar::SummaryInteger& IntervalSummary::number() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.number)
  return _internal_number();
}
inline ::poplar::SummaryInteger* IntervalSummary::_internal_mutable_number() {
  if (!_internal_has_number()) {
    clear_value();
    set_has_number();
    value_.number_ = CreateMaybeMessage< ::poplar::SummaryInteger >(
        GetArenaNoVirtual());
  }
  return value_.number_;
}
inline ::poplar::SummaryInteger* IntervalSummary::mutable_number() {
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.number)
  return _internal_mutable_number();
}

// .poplar.SummaryIntegerSlice number_values = 3;
inline bool IntervalSummary::_internal_has_number_values() const {
  return value_case() == kNumberValues;
}
inline bool IntervalSummary::has_number_values() const {
  return _internal_has_number_values();
}
inline void IntervalSummary::set_has_number_values() {
  _oneof_case_[0] = kNumberValues;
}
inline void IntervalSummary::clear_number_values() {
  if (_internal_has_number_values()) {
    delete value_.number_values_;
    clear_has_value();
  }
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::release_number_values() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.number_values)
  if (_internal_has_number_values()) {
    clear_has_value();
      ::poplar::SummaryIntegerSlice* temp = value_.number_values_;
    value_.number_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryIntegerSlice& IntervalSummary::_internal_number_values() const {
  return _internal_has_number_values()
      ? *value_.number_values_
      : *reinterpret_cast< ::poplar::SummaryIntegerSlice*>(&::poplar::_SummaryIntegerSlice_default_instance_);
}
inline const ::poplar::SummaryIntegerSlice& IntervalSummary::number_values() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.number_values)
  return _internal_number_values();
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::_internal_mutable_number_values() {
  if (!_internal_has_number_values()) {
    clear_value();
    set_has_number_values();
    value_.number_values_ = CreateMaybeMessage< ::poplar::SummaryIntegerSlice >(
        GetArenaNoVirtual());
  }
  return value_.number_values_;
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::mutable_number_values() {
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.number_values)
  return _internal_mutable_number_values();
}

// .poplar.SummaryDouble point = 4;
inline bool IntervalSummary::_internal_has_point() const {
  return value_case() == kPoint;
}
inline bool IntervalSummary::has_point() const {
  return _internal_has_point();
}
inline void IntervalSummary::set_has_point() {
  _oneof_case_[0] = kPoint;
}
inline void IntervalSummary::clear_point() {
  if (_internal_has_point()) {
    delete value_.point_;
    clear_has_value();
  }
}
inline ::poplar::SummaryDouble* IntervalSummary::release_point() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.point)
  if (_internal_has_point()) {
    clear_has_value();
      ::poplar::SummaryDouble* temp = value_.point_;
    value_.point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryDouble& IntervalSummary::_internal_point() const {
  return _internal_has_point()
      ? *value_.point_
      : *reinterpret_cast< ::poplar::SummaryDouble*>(&::poplar::_SummaryDouble_default_instance_);
}
inline const ::poplar::SummaryDouble& IntervalSummary::point() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.point)
  return _internal_point();
}
inline ::poplar::SummaryDouble* IntervalSummary::_internal_mutable_point() {
  if (!_internal_has_point()) {
    clear_value();
    set_has_point();
    value_.point_ = CreateMaybeMessage< ::poplar::SummaryDouble >(
        GetArenaNoVirtual());
  }
  return value_.point_;
}
inline ::poplar::SummaryDouble* IntervalSummary::mutable_point() {
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.point)
  return _internal_mutable_point();
}

// .poplar.SummaryDoubleSlice point_values = 5;
inline bool IntervalSummary::_internal_has_point_values() const {
  return value_case() == kPointValues;
}
inline bool IntervalSummary::has_point_values() const {
  return _internal_has_point_values();
}
inline void IntervalSummary::set_has_point_values() {
  _oneof_case_[0] = kPointValues;
}
inline void IntervalSummary::clear_point_values() {
  if (_internal_has_point_values()) {
    delete value_.point_values_;
    clear_has_value();
  }
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::release_point_values() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.point_values)
  if (_internal_has_point_values()) {
    clear_has_value();
      ::poplar::SummaryDoubleSlice* temp = value_.point_values_;
    value_.point_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryDoubleSlice& IntervalSummary::_internal_point_values() const {
  return _internal_has_point_values()
      ? *value_.point_values_
      : *reinterpret_cast< ::poplar::SummaryDoubleSlice*>(&::poplar::_SummaryDoubleSlice_default_instance_);
}
inline const ::poplar::SummaryDoubleSlice& IntervalSummary::point_values() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.point_values)
  return _internal_point_values();
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::_internal_mutable_point_values() {
  if (!_internal_has_point_values()) {
    clear_value();
    set_has_point_values();
    value_.point_values_ = CreateMaybeMessage< ::poplar::SummaryDoubleSlice >(
        GetArenaNoVirtual());
  }
  return value_.point_values_;
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::mutable_point_values() {
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.point_values)
  return _internal_mutable_point_values();
}

inline bool IntervalSummary::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void IntervalSummary::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline IntervalSummary::ValueCase IntervalSummary::value_case() const {
  return IntervalSummary::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SummaryIntegerSlice

// string name = 1;
inline void SummaryIntegerSlice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SummaryIntegerSlice::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryIntegerSlice.name)
  return _internal_name();
}
inline void SummaryIntegerSlice::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryIntegerSlice.name)
}
inline std::string* SummaryIntegerSlice::mutable_name() {
  // @@protoc_insertion_point(field_mutable:poplar.SummaryIntegerSlice.name)
  return _internal_mutable_name();
}
inline const std::string& SummaryIntegerSlice::_internal_name() const {
  return name_.GetNoArena();
}
inline void SummaryIntegerSlice::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SummaryIntegerSlice::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poplar.SummaryIntegerSlice.name)
}
inline void SummaryIntegerSlice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poplar.SummaryIntegerSlice.name)
}
inline void SummaryIntegerSlice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poplar.SummaryIntegerSlice.name)
}
inline std::string* SummaryIntegerSlice::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryIntegerSlice::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryIntegerSlice.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryIntegerSlice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryIntegerSlice.name)
}

// repeated int64 value = 2;
inline int SummaryIntegerSlice::_internal_value_size() const {
  return value_.size();
}
inline int SummaryIntegerSlice::value_size() const {
  return _internal_value_size();
}
inline void SummaryIntegerSlice::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SummaryIntegerSlice::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SummaryIntegerSlice::value(int index) const {
  // @@protoc_insertion_point(field_get:poplar.SummaryIntegerSlice.value)
  return _internal_value(index);
}
inline void SummaryIntegerSlice::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:poplar.SummaryIntegerSlice.value)
}
inline void SummaryIntegerSlice::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void SummaryIntegerSlice::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:poplar.SummaryIntegerSlice.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SummaryIntegerSlice::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SummaryIntegerSlice::value() const {
  // @@protoc_insertion_point(field_list:poplar.SummaryIntegerSlice.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SummaryIntegerSlice::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SummaryIntegerSlice::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:poplar.SummaryIntegerSlice.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// SummaryInteger

// string name = 1;
inline void SummaryInteger::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SummaryInteger::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryInteger.name)
  return _internal_name();
}
inline void SummaryInteger::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryInteger.name)
}
inline std::string* SummaryInteger::mutable_name() {
  // @@protoc_insertion_point(field_mutable:poplar.SummaryInteger.name)
  return _internal_mutable_name();
}
inline const std::string& SummaryInteger::_internal_name() const {
  return name_.GetNoArena();
}
inline void SummaryInteger::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SummaryInteger::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poplar.SummaryInteger.name)
}
inline void SummaryInteger::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poplar.SummaryInteger.name)
}
inline void SummaryInteger::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poplar.SummaryInteger.name)
}
inline std::string* SummaryInteger::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryInteger::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryInteger.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryInteger::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryInteger.name)
}

// int64 value = 2;
inline void SummaryInteger::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SummaryInteger::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SummaryInteger::value() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryInteger.value)
  return _internal_value();
}
inline void SummaryInteger::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void SummaryInteger::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryInteger.value)
}

// -------------------------------------------------------------------

// SummaryDoubleSlice

// string name = 1;
inline void SummaryDoubleSlice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SummaryDoubleSlice::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDoubleSlice.name)
  return _internal_name();
}
inline void SummaryDoubleSlice::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryDoubleSlice.name)
}
inline std::string* SummaryDoubleSlice::mutable_name() {
  // @@protoc_insertion_point(field_mutable:poplar.SummaryDoubleSlice.name)
  return _internal_mutable_name();
}
inline const std::string& SummaryDoubleSlice::_internal_name() const {
  return name_.GetNoArena();
}
inline void SummaryDoubleSlice::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SummaryDoubleSlice::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poplar.SummaryDoubleSlice.name)
}
inline void SummaryDoubleSlice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poplar.SummaryDoubleSlice.name)
}
inline void SummaryDoubleSlice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poplar.SummaryDoubleSlice.name)
}
inline std::string* SummaryDoubleSlice::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryDoubleSlice::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryDoubleSlice.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryDoubleSlice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryDoubleSlice.name)
}

// repeated double value = 2;
inline int SummaryDoubleSlice::_internal_value_size() const {
  return value_.size();
}
inline int SummaryDoubleSlice::value_size() const {
  return _internal_value_size();
}
inline void SummaryDoubleSlice::clear_value() {
  value_.Clear();
}
inline double SummaryDoubleSlice::_internal_value(int index) const {
  return value_.Get(index);
}
inline double SummaryDoubleSlice::value(int index) const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDoubleSlice.value)
  return _internal_value(index);
}
inline void SummaryDoubleSlice::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:poplar.SummaryDoubleSlice.value)
}
inline void SummaryDoubleSlice::_internal_add_value(double value) {
  value_.Add(value);
}
inline void SummaryDoubleSlice::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:poplar.SummaryDoubleSlice.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryDoubleSlice::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryDoubleSlice::value() const {
  // @@protoc_insertion_point(field_list:poplar.SummaryDoubleSlice.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryDoubleSlice::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryDoubleSlice::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:poplar.SummaryDoubleSlice.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// SummaryDouble

// string name = 1;
inline void SummaryDouble::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SummaryDouble::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDouble.name)
  return _internal_name();
}
inline void SummaryDouble::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryDouble.name)
}
inline std::string* SummaryDouble::mutable_name() {
  // @@protoc_insertion_point(field_mutable:poplar.SummaryDouble.name)
  return _internal_mutable_name();
}
inline const std::string& SummaryDouble::_internal_name() const {
  return name_.GetNoArena();
}
inline void SummaryDouble::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SummaryDouble::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:poplar.SummaryDouble.name)
}
inline void SummaryDouble::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:poplar.SummaryDouble.name)
}
inline void SummaryDouble::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:poplar.SummaryDouble.name)
}
inline std::string* SummaryDouble::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryDouble::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryDouble.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryDouble::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryDouble.name)
}

// double value = 2;
inline void SummaryDouble::clear_value() {
  value_ = 0;
}
inline double SummaryDouble::_internal_value() const {
  return value_;
}
inline double SummaryDouble::value() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDouble.value)
  return _internal_value();
}
inline void SummaryDouble::_internal_set_value(double value) {
  
  value_ = value;
}
inline void SummaryDouble::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryDouble.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poplar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
