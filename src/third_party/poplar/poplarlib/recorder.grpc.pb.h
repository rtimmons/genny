// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: recorder.proto
#ifndef GRPC_recorder_2eproto__INCLUDED
#define GRPC_recorder_2eproto__INCLUDED

#include "recorder.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace poplar {

class PoplarMetricsRecorder final {
 public:
  static constexpr char const* service_full_name() {
    return "poplar.PoplarMetricsRecorder";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create builds a new recorder instance which creates a local file,
    // while the close recorder method flushes the contents of that
    // recorder and closes the file.
    virtual ::grpc::Status CreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncCreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncCreateRecorderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncCreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncCreateRecorderRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncCloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncCloseRecorderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncCloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncCloseRecorderRaw(context, request, cq));
    }
    // Event Lifecycle methods
    virtual ::grpc::Status BeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncBeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncBeginEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncBeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncBeginEventRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncResetEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncResetEventRaw(context, request, cq));
    }
    virtual ::grpc::Status EndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncEndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncEndEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncEndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncEndEventRaw(context, request, cq));
    }
    virtual ::grpc::Status SetID(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetID(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetID(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetIDRaw(context, request, cq));
    }
    // Timers
    virtual ::grpc::Status SetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetDurationRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetTotalDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetTotalDurationRaw(context, request, cq));
    }
    // Guages
    virtual ::grpc::Status SetState(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetState(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetState(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetStateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetWorkersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetWorkersRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncSetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncSetFailedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncSetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncSetFailedRaw(context, request, cq));
    }
    // Counters
    virtual ::grpc::Status IncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncIncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncIncOpsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncIncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncIncOpsRaw(context, request, cq));
    }
    virtual ::grpc::Status IncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncIncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncIncSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncIncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncIncSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status IncError(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncIncError(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncIncErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncIncError(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncIncErrorRaw(context, request, cq));
    }
    virtual ::grpc::Status IncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> AsyncIncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(AsyncIncIterationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>> PrepareAsyncIncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>>(PrepareAsyncIncIterationsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create builds a new recorder instance which creates a local file,
      // while the close recorder method flushes the contents of that
      // recorder and closes the file.
      virtual void CreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CloseRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Event Lifecycle methods
      virtual void BeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BeginEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EndEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetID(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetID(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Timers
      virtual void SetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTotalDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetTotalDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Guages
      virtual void SetState(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetState(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWorkers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetWorkers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFailed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetFailed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Counters
      virtual void IncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncOps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncOps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncError(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncError(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncIterations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IncIterations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncCreateRecorderRaw(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncCreateRecorderRaw(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncCloseRecorderRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncCloseRecorderRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncBeginEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncBeginEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncResetEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncResetEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncEndEventRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncEndEventRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetIDRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetIDRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetTimeRaw(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetTimeRaw(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetTotalDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetTotalDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetStateRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetWorkersRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetWorkersRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncSetFailedRaw(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncSetFailedRaw(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncIncOpsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncIncOpsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncIncSizeRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncIncSizeRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncIncErrorRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncIncErrorRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* AsyncIncIterationsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::poplar::PoplarResponse>* PrepareAsyncIncIterationsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncCreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncCreateRecorderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncCreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncCreateRecorderRaw(context, request, cq));
    }
    ::grpc::Status CloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncCloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncCloseRecorderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncCloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncCloseRecorderRaw(context, request, cq));
    }
    ::grpc::Status BeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncBeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncBeginEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncBeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncBeginEventRaw(context, request, cq));
    }
    ::grpc::Status ResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncResetEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncResetEventRaw(context, request, cq));
    }
    ::grpc::Status EndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncEndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncEndEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncEndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncEndEventRaw(context, request, cq));
    }
    ::grpc::Status SetID(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetID(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetID(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetIDRaw(context, request, cq));
    }
    ::grpc::Status SetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetTimeRaw(context, request, cq));
    }
    ::grpc::Status SetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetDurationRaw(context, request, cq));
    }
    ::grpc::Status SetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetTotalDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetTotalDurationRaw(context, request, cq));
    }
    ::grpc::Status SetState(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetState(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetState(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetStateRaw(context, request, cq));
    }
    ::grpc::Status SetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetWorkersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetWorkersRaw(context, request, cq));
    }
    ::grpc::Status SetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncSetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncSetFailedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncSetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncSetFailedRaw(context, request, cq));
    }
    ::grpc::Status IncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncIncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncIncOpsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncIncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncIncOpsRaw(context, request, cq));
    }
    ::grpc::Status IncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncIncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncIncSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncIncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncIncSizeRaw(context, request, cq));
    }
    ::grpc::Status IncError(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncIncError(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncIncErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncIncError(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncIncErrorRaw(context, request, cq));
    }
    ::grpc::Status IncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::poplar::PoplarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> AsyncIncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(AsyncIncIterationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>> PrepareAsyncIncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>>(PrepareAsyncIncIterationsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRecorder(::grpc::ClientContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseRecorder(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CloseRecorder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BeginEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetEvent(::grpc::ClientContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void EndEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void EndEvent(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EndEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetID(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetID(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTime(::grpc::ClientContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTotalDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTotalDuration(::grpc::ClientContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetTotalDuration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetState(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetState(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetWorkers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetWorkers(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetWorkers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetFailed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void SetFailed(::grpc::ClientContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetFailed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncOps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncOps(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncOps(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncSize(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncError(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncError(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncIterations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, std::function<void(::grpc::Status)>) override;
      void IncIterations(::grpc::ClientContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IncIterations(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncCreateRecorderRaw(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncCreateRecorderRaw(::grpc::ClientContext* context, const ::poplar::CreateOptions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncCloseRecorderRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncCloseRecorderRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncBeginEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncBeginEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncResetEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncResetEventRaw(::grpc::ClientContext* context, const ::poplar::PoplarID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncEndEventRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncEndEventRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetIDRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetIDRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetTimeRaw(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetTimeRaw(::grpc::ClientContext* context, const ::poplar::EventSendTime& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetTotalDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetTotalDurationRaw(::grpc::ClientContext* context, const ::poplar::EventSendDuration& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetStateRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetWorkersRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetWorkersRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncSetFailedRaw(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncSetFailedRaw(::grpc::ClientContext* context, const ::poplar::EventSendBool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncIncOpsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncIncOpsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncIncSizeRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncIncSizeRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncIncErrorRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncIncErrorRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* AsyncIncIterationsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::poplar::PoplarResponse>* PrepareAsyncIncIterationsRaw(::grpc::ClientContext* context, const ::poplar::EventSendInt& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRecorder_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseRecorder_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_EndEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_SetID_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTime_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDuration_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTotalDuration_;
    const ::grpc::internal::RpcMethod rpcmethod_SetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SetWorkers_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFailed_;
    const ::grpc::internal::RpcMethod rpcmethod_IncOps_;
    const ::grpc::internal::RpcMethod rpcmethod_IncSize_;
    const ::grpc::internal::RpcMethod rpcmethod_IncError_;
    const ::grpc::internal::RpcMethod rpcmethod_IncIterations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create builds a new recorder instance which creates a local file,
    // while the close recorder method flushes the contents of that
    // recorder and closes the file.
    virtual ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response);
    // Event Lifecycle methods
    virtual ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
    // Timers
    virtual ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response);
    // Guages
    virtual ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response);
    // Counters
    virtual ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
    virtual ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRecorder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRecorder(::grpc::ServerContext* context, ::poplar::CreateOptions* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloseRecorder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseRecorder(::grpc::ServerContext* context, ::poplar::PoplarID* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BeginEvent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BeginEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginEvent(::grpc::ServerContext* context, ::poplar::PoplarID* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResetEvent() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ResetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetEvent(::grpc::ServerContext* context, ::poplar::PoplarID* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EndEvent() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_EndEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndEvent(::grpc::ServerContext* context, ::poplar::EventSendDuration* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetID() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetID(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTime() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTime(::grpc::ServerContext* context, ::poplar::EventSendTime* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetDuration() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDuration(::grpc::ServerContext* context, ::poplar::EventSendDuration* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTotalDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTotalDuration() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetTotalDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTotalDuration(::grpc::ServerContext* context, ::poplar::EventSendDuration* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetState() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetState(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetWorkers() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWorkers(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetFailed() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFailed(::grpc::ServerContext* context, ::poplar::EventSendBool* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncOps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IncOps() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_IncOps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncOps(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IncSize() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_IncSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncSize(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IncError() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_IncError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncError(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncIterations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IncIterations() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_IncIterations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncIterations(::grpc::ServerContext* context, ::poplar::EventSendInt* request, ::grpc::ServerAsyncResponseWriter< ::poplar::PoplarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateRecorder<WithAsyncMethod_CloseRecorder<WithAsyncMethod_BeginEvent<WithAsyncMethod_ResetEvent<WithAsyncMethod_EndEvent<WithAsyncMethod_SetID<WithAsyncMethod_SetTime<WithAsyncMethod_SetDuration<WithAsyncMethod_SetTotalDuration<WithAsyncMethod_SetState<WithAsyncMethod_SetWorkers<WithAsyncMethod_SetFailed<WithAsyncMethod_IncOps<WithAsyncMethod_IncSize<WithAsyncMethod_IncError<WithAsyncMethod_IncIterations<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateRecorder() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::CreateOptions, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::CreateOptions* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateRecorder(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateRecorder(
        ::grpc::experimental::MessageAllocator< ::poplar::CreateOptions, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::CreateOptions, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CloseRecorder() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::PoplarID* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CloseRecorder(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CloseRecorder(
        ::grpc::experimental::MessageAllocator< ::poplar::PoplarID, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BeginEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BeginEvent() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::PoplarID* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BeginEvent(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BeginEvent(
        ::grpc::experimental::MessageAllocator< ::poplar::PoplarID, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BeginEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ResetEvent() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::PoplarID* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetEvent(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ResetEvent(
        ::grpc::experimental::MessageAllocator< ::poplar::PoplarID, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EndEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EndEvent() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendDuration* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EndEvent(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EndEvent(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendDuration, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EndEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetID() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetID(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetID(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetTime() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendTime, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendTime* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetTime(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetTime(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendTime, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendTime, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetDuration() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendDuration* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetDuration(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetDuration(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendDuration, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetTotalDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetTotalDuration() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendDuration* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetTotalDuration(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetTotalDuration(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendDuration, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetTotalDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetState() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetState(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetState(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetWorkers() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetWorkers(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetWorkers(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetFailed() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendBool, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendBool* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetFailed(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetFailed(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendBool, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendBool, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IncOps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_IncOps() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IncOps(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_IncOps(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(12))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IncOps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IncSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_IncSize() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IncSize(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_IncSize(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(13))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IncSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IncError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_IncError() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IncError(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_IncError(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(14))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IncError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IncIterations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_IncIterations() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(
          [this](::grpc::ServerContext* context,
                 const ::poplar::EventSendInt* request,
                 ::poplar::PoplarResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IncIterations(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_IncIterations(
        ::grpc::experimental::MessageAllocator< ::poplar::EventSendInt, ::poplar::PoplarResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>*>(
          ::grpc::Service::experimental().GetHandler(15))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IncIterations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateRecorder<ExperimentalWithCallbackMethod_CloseRecorder<ExperimentalWithCallbackMethod_BeginEvent<ExperimentalWithCallbackMethod_ResetEvent<ExperimentalWithCallbackMethod_EndEvent<ExperimentalWithCallbackMethod_SetID<ExperimentalWithCallbackMethod_SetTime<ExperimentalWithCallbackMethod_SetDuration<ExperimentalWithCallbackMethod_SetTotalDuration<ExperimentalWithCallbackMethod_SetState<ExperimentalWithCallbackMethod_SetWorkers<ExperimentalWithCallbackMethod_SetFailed<ExperimentalWithCallbackMethod_IncOps<ExperimentalWithCallbackMethod_IncSize<ExperimentalWithCallbackMethod_IncError<ExperimentalWithCallbackMethod_IncIterations<Service > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRecorder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloseRecorder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BeginEvent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BeginEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResetEvent() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ResetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EndEvent() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_EndEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetID() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTime() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetDuration() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTotalDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTotalDuration() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetTotalDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetState() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetWorkers() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetFailed() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncOps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IncOps() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_IncOps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IncSize() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_IncSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IncError() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_IncError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncIterations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IncIterations() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_IncIterations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateRecorder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRecorder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CloseRecorder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CloseRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseRecorder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BeginEvent() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BeginEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResetEvent() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ResetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EndEvent() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_EndEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetID() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTime() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetDuration() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDuration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTotalDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTotalDuration() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetTotalDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTotalDuration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetState() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetWorkers() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWorkers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetFailed() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFailed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncOps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IncOps() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_IncOps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncOps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IncSize() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_IncSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IncError() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_IncError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncError(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncIterations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IncIterations() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_IncIterations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncIterations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRecorder() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateRecorder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRecorder(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseRecorder() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CloseRecorder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CloseRecorder(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BeginEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BeginEvent() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BeginEvent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BeginEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BeginEvent(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetEvent() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetEvent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetEvent(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EndEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EndEvent() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EndEvent(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EndEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EndEvent(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetID() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetID(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetTime() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetTime(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTime(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDuration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetDuration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDuration(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetTotalDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetTotalDuration() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetTotalDuration(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetTotalDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTotalDuration(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetWorkers() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetWorkers(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetWorkers(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetFailed() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetFailed(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetFailed(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IncOps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_IncOps() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IncOps(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IncOps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncOps(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IncSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_IncSize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IncSize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IncSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncSize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IncError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_IncError() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IncError(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IncError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncError(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IncIterations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_IncIterations() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IncIterations(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IncIterations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IncIterations(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateRecorder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::CreateOptions, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_CreateRecorder<BaseClass>::StreamedCreateRecorder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRecorder(::grpc::ServerContext* context, const ::poplar::CreateOptions* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRecorder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::CreateOptions,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseRecorder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CloseRecorder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_CloseRecorder<BaseClass>::StreamedCloseRecorder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseRecorder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseRecorder(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseRecorder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::PoplarID,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BeginEvent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_BeginEvent<BaseClass>::StreamedBeginEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BeginEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::PoplarID,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResetEvent() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::PoplarID, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_ResetEvent<BaseClass>::StreamedResetEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetEvent(::grpc::ServerContext* context, const ::poplar::PoplarID* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::PoplarID,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EndEvent() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_EndEvent<BaseClass>::StreamedEndEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EndEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndEvent(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendDuration,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetID() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetID<BaseClass>::StreamedSetID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetID(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTime() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendTime, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetTime<BaseClass>::StreamedSetTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* context, const ::poplar::EventSendTime* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendTime,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetDuration() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetDuration<BaseClass>::StreamedSetDuration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDuration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendDuration,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTotalDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTotalDuration() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendDuration, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetTotalDuration<BaseClass>::StreamedSetTotalDuration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTotalDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTotalDuration(::grpc::ServerContext* context, const ::poplar::EventSendDuration* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTotalDuration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendDuration,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetState() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetState<BaseClass>::StreamedSetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetWorkers() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetWorkers<BaseClass>::StreamedSetWorkers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetWorkers(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetWorkers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetFailed() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendBool, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_SetFailed<BaseClass>::StreamedSetFailed, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFailed(::grpc::ServerContext* context, const ::poplar::EventSendBool* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFailed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendBool,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncOps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IncOps() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_IncOps<BaseClass>::StreamedIncOps, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IncOps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncOps(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncOps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IncSize() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_IncSize<BaseClass>::StreamedIncSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IncSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncSize(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IncError() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_IncError<BaseClass>::StreamedIncError, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IncError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncError(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncError(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncIterations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IncIterations() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::poplar::EventSendInt, ::poplar::PoplarResponse>(std::bind(&WithStreamedUnaryMethod_IncIterations<BaseClass>::StreamedIncIterations, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IncIterations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncIterations(::grpc::ServerContext* context, const ::poplar::EventSendInt* request, ::poplar::PoplarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncIterations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::poplar::EventSendInt,::poplar::PoplarResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateRecorder<WithStreamedUnaryMethod_CloseRecorder<WithStreamedUnaryMethod_BeginEvent<WithStreamedUnaryMethod_ResetEvent<WithStreamedUnaryMethod_EndEvent<WithStreamedUnaryMethod_SetID<WithStreamedUnaryMethod_SetTime<WithStreamedUnaryMethod_SetDuration<WithStreamedUnaryMethod_SetTotalDuration<WithStreamedUnaryMethod_SetState<WithStreamedUnaryMethod_SetWorkers<WithStreamedUnaryMethod_SetFailed<WithStreamedUnaryMethod_IncOps<WithStreamedUnaryMethod_IncSize<WithStreamedUnaryMethod_IncError<WithStreamedUnaryMethod_IncIterations<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateRecorder<WithStreamedUnaryMethod_CloseRecorder<WithStreamedUnaryMethod_BeginEvent<WithStreamedUnaryMethod_ResetEvent<WithStreamedUnaryMethod_EndEvent<WithStreamedUnaryMethod_SetID<WithStreamedUnaryMethod_SetTime<WithStreamedUnaryMethod_SetDuration<WithStreamedUnaryMethod_SetTotalDuration<WithStreamedUnaryMethod_SetState<WithStreamedUnaryMethod_SetWorkers<WithStreamedUnaryMethod_SetFailed<WithStreamedUnaryMethod_IncOps<WithStreamedUnaryMethod_IncSize<WithStreamedUnaryMethod_IncError<WithStreamedUnaryMethod_IncIterations<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace poplar


#endif  // GRPC_recorder_2eproto__INCLUDED
