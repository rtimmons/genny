// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jasper.proto

#include "jasper.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArchiveOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BufferOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildloggerOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOptions_EnvironmentEntry_DoNotUse_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JasperProcessID_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Logger_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OutputOptions_jasper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jasper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplunkOptions_jasper_2eproto;
namespace jasper {
class LoggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logger> _instance;
} _Logger_default_instance_;
class OutputOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputOptions> _instance;
} _OutputOptions_default_instance_;
class LogOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogOptions> _instance;
} _LogOptions_default_instance_;
class BufferOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BufferOptions> _instance;
} _BufferOptions_default_instance_;
class BuildloggerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildloggerOptions> _instance;
} _BuildloggerOptions_default_instance_;
class SplunkOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplunkOptions> _instance;
} _SplunkOptions_default_instance_;
class CreateOptions_EnvironmentEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOptions_EnvironmentEntry_DoNotUse> _instance;
} _CreateOptions_EnvironmentEntry_DoNotUse_default_instance_;
class CreateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateOptions> _instance;
} _CreateOptions_default_instance_;
class ProcessInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessInfo> _instance;
} _ProcessInfo_default_instance_;
class StatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class FilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Filter> _instance;
} _Filter_default_instance_;
class SignalProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalProcess> _instance;
} _SignalProcess_default_instance_;
class TagNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TagName> _instance;
} _TagName_default_instance_;
class ProcessTagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessTags> _instance;
} _ProcessTags_default_instance_;
class JasperProcessIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JasperProcessID> _instance;
} _JasperProcessID_default_instance_;
class OperationOutcomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationOutcome> _instance;
} _OperationOutcome_default_instance_;
class BuildOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildOptions> _instance;
} _BuildOptions_default_instance_;
class MongoDBDownloadOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MongoDBDownloadOptions> _instance;
} _MongoDBDownloadOptions_default_instance_;
class CacheOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheOptions> _instance;
} _CacheOptions_default_instance_;
class ArchiveOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArchiveOptions> _instance;
} _ArchiveOptions_default_instance_;
class DownloadInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadInfo> _instance;
} _DownloadInfo_default_instance_;
class BuildloggerURLsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildloggerURLs> _instance;
} _BuildloggerURLs_default_instance_;
}  // namespace jasper
static void InitDefaultsscc_info_ArchiveOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_ArchiveOptions_default_instance_;
    new (ptr) ::jasper::ArchiveOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::ArchiveOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArchiveOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArchiveOptions_jasper_2eproto}, {}};

static void InitDefaultsscc_info_BufferOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_BufferOptions_default_instance_;
    new (ptr) ::jasper::BufferOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::BufferOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BufferOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BufferOptions_jasper_2eproto}, {}};

static void InitDefaultsscc_info_BuildOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_BuildOptions_default_instance_;
    new (ptr) ::jasper::BuildOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::BuildOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildOptions_jasper_2eproto}, {}};

static void InitDefaultsscc_info_BuildloggerOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_BuildloggerOptions_default_instance_;
    new (ptr) ::jasper::BuildloggerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::BuildloggerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildloggerOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildloggerOptions_jasper_2eproto}, {}};

static void InitDefaultsscc_info_BuildloggerURLs_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_BuildloggerURLs_default_instance_;
    new (ptr) ::jasper::BuildloggerURLs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::BuildloggerURLs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildloggerURLs_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildloggerURLs_jasper_2eproto}, {}};

static void InitDefaultsscc_info_CacheOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_CacheOptions_default_instance_;
    new (ptr) ::jasper::CacheOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::CacheOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheOptions_jasper_2eproto}, {}};

static void InitDefaultsscc_info_CreateOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_CreateOptions_default_instance_;
    new (ptr) ::jasper::CreateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::CreateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateOptions_jasper_2eproto}, {
      &scc_info_CreateOptions_EnvironmentEntry_DoNotUse_jasper_2eproto.base,
      &scc_info_OutputOptions_jasper_2eproto.base,}};

static void InitDefaultsscc_info_CreateOptions_EnvironmentEntry_DoNotUse_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_CreateOptions_EnvironmentEntry_DoNotUse_default_instance_;
    new (ptr) ::jasper::CreateOptions_EnvironmentEntry_DoNotUse();
  }
  ::jasper::CreateOptions_EnvironmentEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateOptions_EnvironmentEntry_DoNotUse_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateOptions_EnvironmentEntry_DoNotUse_jasper_2eproto}, {}};

static void InitDefaultsscc_info_DownloadInfo_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_DownloadInfo_default_instance_;
    new (ptr) ::jasper::DownloadInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::DownloadInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadInfo_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DownloadInfo_jasper_2eproto}, {
      &scc_info_ArchiveOptions_jasper_2eproto.base,}};

static void InitDefaultsscc_info_Filter_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_Filter_default_instance_;
    new (ptr) ::jasper::Filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::Filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Filter_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Filter_jasper_2eproto}, {}};

static void InitDefaultsscc_info_JasperProcessID_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_JasperProcessID_default_instance_;
    new (ptr) ::jasper::JasperProcessID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::JasperProcessID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JasperProcessID_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JasperProcessID_jasper_2eproto}, {}};

static void InitDefaultsscc_info_LogOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_LogOptions_default_instance_;
    new (ptr) ::jasper::LogOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::LogOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LogOptions_jasper_2eproto}, {
      &scc_info_BufferOptions_jasper_2eproto.base,
      &scc_info_BuildloggerOptions_jasper_2eproto.base,
      &scc_info_SplunkOptions_jasper_2eproto.base,}};

static void InitDefaultsscc_info_Logger_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_Logger_default_instance_;
    new (ptr) ::jasper::Logger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::Logger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Logger_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Logger_jasper_2eproto}, {
      &scc_info_LogOptions_jasper_2eproto.base,}};

static void InitDefaultsscc_info_MongoDBDownloadOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_MongoDBDownloadOptions_default_instance_;
    new (ptr) ::jasper::MongoDBDownloadOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::MongoDBDownloadOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MongoDBDownloadOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MongoDBDownloadOptions_jasper_2eproto}, {
      &scc_info_BuildOptions_jasper_2eproto.base,}};

static void InitDefaultsscc_info_OperationOutcome_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_OperationOutcome_default_instance_;
    new (ptr) ::jasper::OperationOutcome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::OperationOutcome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationOutcome_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationOutcome_jasper_2eproto}, {}};

static void InitDefaultsscc_info_OutputOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_OutputOptions_default_instance_;
    new (ptr) ::jasper::OutputOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::OutputOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OutputOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OutputOptions_jasper_2eproto}, {
      &scc_info_Logger_jasper_2eproto.base,}};

static void InitDefaultsscc_info_ProcessInfo_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_ProcessInfo_default_instance_;
    new (ptr) ::jasper::ProcessInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::ProcessInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessInfo_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessInfo_jasper_2eproto}, {
      &scc_info_CreateOptions_jasper_2eproto.base,}};

static void InitDefaultsscc_info_ProcessTags_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_ProcessTags_default_instance_;
    new (ptr) ::jasper::ProcessTags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::ProcessTags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessTags_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessTags_jasper_2eproto}, {}};

static void InitDefaultsscc_info_SignalProcess_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_SignalProcess_default_instance_;
    new (ptr) ::jasper::SignalProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::SignalProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalProcess_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignalProcess_jasper_2eproto}, {
      &scc_info_JasperProcessID_jasper_2eproto.base,}};

static void InitDefaultsscc_info_SplunkOptions_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_SplunkOptions_default_instance_;
    new (ptr) ::jasper::SplunkOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::SplunkOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplunkOptions_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SplunkOptions_jasper_2eproto}, {}};

static void InitDefaultsscc_info_StatusResponse_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_StatusResponse_default_instance_;
    new (ptr) ::jasper::StatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::StatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusResponse_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusResponse_jasper_2eproto}, {}};

static void InitDefaultsscc_info_TagName_jasper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jasper::_TagName_default_instance_;
    new (ptr) ::jasper::TagName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jasper::TagName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TagName_jasper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TagName_jasper_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jasper_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_jasper_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jasper_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jasper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::Logger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::Logger, log_type_),
  PROTOBUF_FIELD_OFFSET(::jasper::Logger, log_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::OutputOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::OutputOptions, loggers_),
  PROTOBUF_FIELD_OFFSET(::jasper::OutputOptions, suppress_output_),
  PROTOBUF_FIELD_OFFSET(::jasper::OutputOptions, suppress_error_),
  PROTOBUF_FIELD_OFFSET(::jasper::OutputOptions, redirect_output_to_error_),
  PROTOBUF_FIELD_OFFSET(::jasper::OutputOptions, redirect_error_to_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, buffer_options_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, buildlogger_options_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, default_prefix_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, file_name_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, format_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, in_memory_cap_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, splunk_options_),
  PROTOBUF_FIELD_OFFSET(::jasper::LogOptions, sumo_endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::BufferOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::BufferOptions, buffered_),
  PROTOBUF_FIELD_OFFSET(::jasper::BufferOptions, duration_),
  PROTOBUF_FIELD_OFFSET(::jasper::BufferOptions, max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, create_test_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, url_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, number_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, phase_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, builder_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, test_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerOptions, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::SplunkOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::SplunkOptions, url_),
  PROTOBUF_FIELD_OFFSET(::jasper::SplunkOptions, token_),
  PROTOBUF_FIELD_OFFSET(::jasper::SplunkOptions, channel_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions_EnvironmentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions_EnvironmentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions_EnvironmentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions_EnvironmentEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, args_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, working_directory_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, environment_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, override_environ_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, tags_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, on_success_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, on_failure_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, on_timeout_),
  PROTOBUF_FIELD_OFFSET(::jasper::CreateOptions, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, id_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, host_id_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, running_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, successful_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, complete_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, timedout_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessInfo, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::StatusResponse, host_id_),
  PROTOBUF_FIELD_OFFSET(::jasper::StatusResponse, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::Filter, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::SignalProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::SignalProcess, processid_),
  PROTOBUF_FIELD_OFFSET(::jasper::SignalProcess, signal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::TagName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::TagName, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessTags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessTags, processid_),
  PROTOBUF_FIELD_OFFSET(::jasper::ProcessTags, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::JasperProcessID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::JasperProcessID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::OperationOutcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::OperationOutcome, success_),
  PROTOBUF_FIELD_OFFSET(::jasper::OperationOutcome, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::BuildOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::BuildOptions, target_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildOptions, arch_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildOptions, edition_),
  PROTOBUF_FIELD_OFFSET(::jasper::BuildOptions, debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::MongoDBDownloadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::MongoDBDownloadOptions, build_options_),
  PROTOBUF_FIELD_OFFSET(::jasper::MongoDBDownloadOptions, path_),
  PROTOBUF_FIELD_OFFSET(::jasper::MongoDBDownloadOptions, releases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::CacheOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::CacheOptions, disabled_),
  PROTOBUF_FIELD_OFFSET(::jasper::CacheOptions, prune_delay_),
  PROTOBUF_FIELD_OFFSET(::jasper::CacheOptions, max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::ArchiveOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::ArchiveOptions, should_extract_),
  PROTOBUF_FIELD_OFFSET(::jasper::ArchiveOptions, format_),
  PROTOBUF_FIELD_OFFSET(::jasper::ArchiveOptions, target_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::DownloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::DownloadInfo, url_),
  PROTOBUF_FIELD_OFFSET(::jasper::DownloadInfo, path_),
  PROTOBUF_FIELD_OFFSET(::jasper::DownloadInfo, archive_opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerURLs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jasper::BuildloggerURLs, urls_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jasper::Logger)},
  { 7, -1, sizeof(::jasper::OutputOptions)},
  { 17, -1, sizeof(::jasper::LogOptions)},
  { 30, -1, sizeof(::jasper::BufferOptions)},
  { 38, -1, sizeof(::jasper::BuildloggerOptions)},
  { 50, -1, sizeof(::jasper::SplunkOptions)},
  { 58, 65, sizeof(::jasper::CreateOptions_EnvironmentEntry_DoNotUse)},
  { 67, -1, sizeof(::jasper::CreateOptions)},
  { 82, -1, sizeof(::jasper::ProcessInfo)},
  { 95, -1, sizeof(::jasper::StatusResponse)},
  { 102, -1, sizeof(::jasper::Filter)},
  { 108, -1, sizeof(::jasper::SignalProcess)},
  { 115, -1, sizeof(::jasper::TagName)},
  { 121, -1, sizeof(::jasper::ProcessTags)},
  { 128, -1, sizeof(::jasper::JasperProcessID)},
  { 134, -1, sizeof(::jasper::OperationOutcome)},
  { 141, -1, sizeof(::jasper::BuildOptions)},
  { 150, -1, sizeof(::jasper::MongoDBDownloadOptions)},
  { 158, -1, sizeof(::jasper::CacheOptions)},
  { 166, -1, sizeof(::jasper::ArchiveOptions)},
  { 174, -1, sizeof(::jasper::DownloadInfo)},
  { 182, -1, sizeof(::jasper::BuildloggerURLs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_Logger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_OutputOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_LogOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_BufferOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_BuildloggerOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_SplunkOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_CreateOptions_EnvironmentEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_CreateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_ProcessInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_SignalProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_TagName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_ProcessTags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_JasperProcessID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_OperationOutcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_BuildOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_MongoDBDownloadOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_CacheOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_ArchiveOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_DownloadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jasper::_BuildloggerURLs_default_instance_),
};

const char descriptor_table_protodef_jasper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014jasper.proto\022\006jasper\032\033google/protobuf/"
  "empty.proto\"T\n\006Logger\022!\n\010log_type\030\001 \001(\0162"
  "\017.jasper.LogType\022\'\n\013log_options\030\002 \001(\0132\022."
  "jasper.LogOptions\"\245\001\n\rOutputOptions\022\037\n\007l"
  "oggers\030\001 \003(\0132\016.jasper.Logger\022\027\n\017suppress"
  "_output\030\002 \001(\010\022\026\n\016suppress_error\030\003 \001(\010\022 \n"
  "\030redirect_output_to_error\030\004 \001(\010\022 \n\030redir"
  "ect_error_to_output\030\005 \001(\010\"\214\002\n\nLogOptions"
  "\022-\n\016buffer_options\030\001 \001(\0132\025.jasper.Buffer"
  "Options\0227\n\023buildlogger_options\030\002 \001(\0132\032.j"
  "asper.BuildloggerOptions\022\026\n\016default_pref"
  "ix\030\003 \001(\t\022\021\n\tfile_name\030\004 \001(\t\022\016\n\006format\030\005 "
  "\001(\t\022\025\n\rin_memory_cap\030\006 \001(\003\022-\n\016splunk_opt"
  "ions\030\007 \001(\0132\025.jasper.SplunkOptions\022\025\n\rsum"
  "o_endpoint\030\010 \001(\t\"E\n\rBufferOptions\022\020\n\010buf"
  "fered\030\001 \001(\010\022\020\n\010duration\030\002 \001(\003\022\020\n\010max_siz"
  "e\030\003 \001(\003\"\205\001\n\022BuildloggerOptions\022\023\n\013create"
  "_test\030\001 \001(\010\022\013\n\003url\030\002 \001(\t\022\016\n\006number\030\003 \001(\003"
  "\022\r\n\005phase\030\004 \001(\t\022\017\n\007builder\030\005 \001(\t\022\014\n\004test"
  "\030\006 \001(\t\022\017\n\007command\030\007 \001(\t\"<\n\rSplunkOptions"
  "\022\013\n\003url\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\022\017\n\007channel\030"
  "\003 \001(\t\"\222\003\n\rCreateOptions\022\014\n\004args\030\001 \003(\t\022\031\n"
  "\021working_directory\030\002 \001(\t\022;\n\013environment\030"
  "\003 \003(\0132&.jasper.CreateOptions.Environment"
  "Entry\022\030\n\020override_environ\030\004 \001(\010\022\027\n\017timeo"
  "ut_seconds\030\005 \001(\003\022\014\n\004tags\030\006 \003(\t\022)\n\non_suc"
  "cess\030\007 \003(\0132\025.jasper.CreateOptions\022)\n\non_"
  "failure\030\010 \003(\0132\025.jasper.CreateOptions\022)\n\n"
  "on_timeout\030\t \003(\0132\025.jasper.CreateOptions\022"
  "%\n\006output\030\n \001(\0132\025.jasper.OutputOptions\0322"
  "\n\020EnvironmentEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\250\001\n\013ProcessInfo\022\n\n\002id\030\001 \001(\t\022\013"
  "\n\003pid\030\002 \001(\003\022\017\n\007host_id\030\003 \001(\t\022\017\n\007running\030"
  "\004 \001(\010\022\022\n\nsuccessful\030\005 \001(\010\022\020\n\010complete\030\006 "
  "\001(\010\022\020\n\010timedout\030\007 \001(\010\022&\n\007options\030\010 \001(\0132\025"
  ".jasper.CreateOptions\"1\n\016StatusResponse\022"
  "\017\n\007host_id\030\001 \001(\t\022\016\n\006active\030\002 \001(\010\"4\n\006Filt"
  "er\022*\n\004name\030\001 \001(\0162\034.jasper.FilterSpecific"
  "ations\"\\\n\rSignalProcess\022*\n\tProcessID\030\001 \001"
  "(\0132\027.jasper.JasperProcessID\022\037\n\006signal\030\002 "
  "\001(\0162\017.jasper.Signals\"\030\n\007TagName\022\r\n\005value"
  "\030\001 \001(\t\".\n\013ProcessTags\022\021\n\tprocessID\030\001 \001(\t"
  "\022\014\n\004tags\030\002 \003(\t\" \n\017JasperProcessID\022\r\n\005val"
  "ue\030\001 \001(\t\"1\n\020OperationOutcome\022\017\n\007success\030"
  "\001 \001(\010\022\014\n\004text\030\002 \001(\t\"L\n\014BuildOptions\022\016\n\006t"
  "arget\030\001 \001(\t\022\014\n\004arch\030\002 \001(\t\022\017\n\007edition\030\003 \001"
  "(\t\022\r\n\005debug\030\004 \001(\010\"e\n\026MongoDBDownloadOpti"
  "ons\022+\n\rbuild_options\030\001 \001(\0132\024.jasper.Buil"
  "dOptions\022\014\n\004path\030\002 \001(\t\022\020\n\010releases\030\003 \003(\t"
  "\"G\n\014CacheOptions\022\020\n\010disabled\030\001 \001(\010\022\023\n\013pr"
  "une_delay\030\002 \001(\003\022\020\n\010max_size\030\003 \001(\003\"d\n\016Arc"
  "hiveOptions\022\026\n\016should_extract\030\001 \001(\010\022%\n\006f"
  "ormat\030\002 \001(\0162\025.jasper.ArchiveFormat\022\023\n\013ta"
  "rget_path\030\003 \001(\t\"W\n\014DownloadInfo\022\013\n\003url\030\001"
  " \001(\t\022\014\n\004path\030\002 \001(\t\022,\n\014archive_opts\030\003 \001(\013"
  "2\026.jasper.ArchiveOptions\"\037\n\017BuildloggerU"
  "RLs\022\014\n\004urls\030\001 \003(\t*\244\001\n\007LogType\022\016\n\nLOGUNKN"
  "OWN\020\000\022\024\n\020LOGBUILDLOGGERV2\020\001\022\024\n\020LOGBUILDL"
  "OGGERV3\020\002\022\016\n\nLOGDEFAULT\020\003\022\013\n\007LOGFILE\020\004\022\016"
  "\n\nLOGINHERIT\020\005\022\r\n\tLOGSPLUNK\020\006\022\020\n\014LOGSUMO"
  "LOGIC\020\007\022\017\n\013LOGINMEMORY\020\010*^\n\tLogFormat\022\024\n"
  "\020LOGFORMATUNKNOWN\020\000\022\024\n\020LOGFORMATDEFAULT\020"
  "\001\022\021\n\rLOGFORMATJSON\020\002\022\022\n\016LOGFORMATPLAIN\020\003"
  "*X\n\024FilterSpecifications\022\007\n\003ALL\020\000\022\013\n\007RUN"
  "NING\020\001\022\016\n\nTERMINATED\020\002\022\n\n\006FAILED\020\003\022\016\n\nSU"
  "CCESSFUL\020\004*[\n\007Signals\022\013\n\007UNKNOWN\020\000\022\r\n\tTE"
  "RMINATE\020\001\022\010\n\004KILL\020\002\022\n\n\006HANGUP\020\003\022\010\n\004INIT\020"
  "\004\022\t\n\005USER1\020\005\022\t\n\005USER2\020\006*V\n\rArchiveFormat"
  "\022\022\n\016ARCHIVEUNKNOWN\020\000\022\017\n\013ARCHIVEAUTO\020\001\022\020\n"
  "\014ARCHIVETARGZ\020\002\022\016\n\nARCHIVEZIP\020\0032\336\007\n\024Jasp"
  "erProcessManager\0228\n\006Status\022\026.google.prot"
  "obuf.Empty\032\026.jasper.StatusResponse\0224\n\006Cr"
  "eate\022\025.jasper.CreateOptions\032\023.jasper.Pro"
  "cessInfo\022-\n\004List\022\016.jasper.Filter\032\023.jaspe"
  "r.ProcessInfo0\001\022/\n\005Group\022\017.jasper.TagNam"
  "e\032\023.jasper.ProcessInfo0\001\0223\n\003Get\022\027.jasper"
  ".JasperProcessID\032\023.jasper.ProcessInfo\0229\n"
  "\004Wait\022\027.jasper.JasperProcessID\032\030.jasper."
  "OperationOutcome\0229\n\006Signal\022\025.jasper.Sign"
  "alProcess\032\030.jasper.OperationOutcome\0229\n\005C"
  "lose\022\026.google.protobuf.Empty\032\030.jasper.Op"
  "erationOutcome\022;\n\nTagProcess\022\023.jasper.Pr"
  "ocessTags\032\030.jasper.OperationOutcome\022>\n\tR"
  "esetTags\022\027.jasper.JasperProcessID\032\030.jasp"
  "er.OperationOutcome\0227\n\007GetTags\022\027.jasper."
  "JasperProcessID\032\023.jasper.ProcessTags\022>\n\014"
  "DownloadFile\022\024.jasper.DownloadInfo\032\030.jas"
  "per.OperationOutcome\022C\n\021DownloadFileAsyn"
  "c\022\024.jasper.DownloadInfo\032\030.jasper.Operati"
  "onOutcome\022K\n\017DownloadMongoDB\022\036.jasper.Mo"
  "ngoDBDownloadOptions\032\030.jasper.OperationO"
  "utcome\022@\n\016ConfigureCache\022\024.jasper.CacheO"
  "ptions\032\030.jasper.OperationOutcome\022F\n\022GetB"
  "uildloggerURLs\022\027.jasper.JasperProcessID\032"
  "\027.jasper.BuildloggerURLsB\nZ\010internalb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jasper_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jasper_2eproto_sccs[22] = {
  &scc_info_ArchiveOptions_jasper_2eproto.base,
  &scc_info_BufferOptions_jasper_2eproto.base,
  &scc_info_BuildOptions_jasper_2eproto.base,
  &scc_info_BuildloggerOptions_jasper_2eproto.base,
  &scc_info_BuildloggerURLs_jasper_2eproto.base,
  &scc_info_CacheOptions_jasper_2eproto.base,
  &scc_info_CreateOptions_jasper_2eproto.base,
  &scc_info_CreateOptions_EnvironmentEntry_DoNotUse_jasper_2eproto.base,
  &scc_info_DownloadInfo_jasper_2eproto.base,
  &scc_info_Filter_jasper_2eproto.base,
  &scc_info_JasperProcessID_jasper_2eproto.base,
  &scc_info_LogOptions_jasper_2eproto.base,
  &scc_info_Logger_jasper_2eproto.base,
  &scc_info_MongoDBDownloadOptions_jasper_2eproto.base,
  &scc_info_OperationOutcome_jasper_2eproto.base,
  &scc_info_OutputOptions_jasper_2eproto.base,
  &scc_info_ProcessInfo_jasper_2eproto.base,
  &scc_info_ProcessTags_jasper_2eproto.base,
  &scc_info_SignalProcess_jasper_2eproto.base,
  &scc_info_SplunkOptions_jasper_2eproto.base,
  &scc_info_StatusResponse_jasper_2eproto.base,
  &scc_info_TagName_jasper_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jasper_2eproto_once;
static bool descriptor_table_jasper_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jasper_2eproto = {
  &descriptor_table_jasper_2eproto_initialized, descriptor_table_protodef_jasper_2eproto, "jasper.proto", 3804,
  &descriptor_table_jasper_2eproto_once, descriptor_table_jasper_2eproto_sccs, descriptor_table_jasper_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_jasper_2eproto::offsets,
  file_level_metadata_jasper_2eproto, 22, file_level_enum_descriptors_jasper_2eproto, file_level_service_descriptors_jasper_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jasper_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jasper_2eproto), true);
namespace jasper {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jasper_2eproto);
  return file_level_enum_descriptors_jasper_2eproto[0];
}
bool LogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jasper_2eproto);
  return file_level_enum_descriptors_jasper_2eproto[1];
}
bool LogFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterSpecifications_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jasper_2eproto);
  return file_level_enum_descriptors_jasper_2eproto[2];
}
bool FilterSpecifications_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signals_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jasper_2eproto);
  return file_level_enum_descriptors_jasper_2eproto[3];
}
bool Signals_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArchiveFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jasper_2eproto);
  return file_level_enum_descriptors_jasper_2eproto[4];
}
bool ArchiveFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Logger::InitAsDefaultInstance() {
  ::jasper::_Logger_default_instance_._instance.get_mutable()->log_options_ = const_cast< ::jasper::LogOptions*>(
      ::jasper::LogOptions::internal_default_instance());
}
class Logger::_Internal {
 public:
  static const ::jasper::LogOptions& log_options(const Logger* msg);
};

const ::jasper::LogOptions&
Logger::_Internal::log_options(const Logger* msg) {
  return *msg->log_options_;
}
Logger::Logger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.Logger)
}
Logger::Logger(const Logger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_log_options()) {
    log_options_ = new ::jasper::LogOptions(*from.log_options_);
  } else {
    log_options_ = nullptr;
  }
  log_type_ = from.log_type_;
  // @@protoc_insertion_point(copy_constructor:jasper.Logger)
}

void Logger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logger_jasper_2eproto.base);
  ::memset(&log_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_type_) -
      reinterpret_cast<char*>(&log_options_)) + sizeof(log_type_));
}

Logger::~Logger() {
  // @@protoc_insertion_point(destructor:jasper.Logger)
  SharedDtor();
}

void Logger::SharedDtor() {
  if (this != internal_default_instance()) delete log_options_;
}

void Logger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logger& Logger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logger_jasper_2eproto.base);
  return *internal_default_instance();
}


void Logger::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.Logger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && log_options_ != nullptr) {
    delete log_options_;
  }
  log_options_ = nullptr;
  log_type_ = 0;
  _internal_metadata_.Clear();
}

const char* Logger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jasper.LogType log_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_log_type(static_cast<::jasper::LogType>(val));
        } else goto handle_unusual;
        continue;
      // .jasper.LogOptions log_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.Logger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jasper.LogType log_type = 1;
  if (this->log_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_log_type(), target);
  }

  // .jasper.LogOptions log_options = 2;
  if (this->has_log_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::log_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.Logger)
  return target;
}

size_t Logger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.Logger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jasper.LogOptions log_options = 2;
  if (this->has_log_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_options_);
  }

  // .jasper.LogType log_type = 1;
  if (this->log_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.Logger)
  GOOGLE_DCHECK_NE(&from, this);
  const Logger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.Logger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.Logger)
    MergeFrom(*source);
  }
}

void Logger::MergeFrom(const Logger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.Logger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_log_options()) {
    _internal_mutable_log_options()->::jasper::LogOptions::MergeFrom(from._internal_log_options());
  }
  if (from.log_type() != 0) {
    _internal_set_log_type(from._internal_log_type());
  }
}

void Logger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.Logger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logger::CopyFrom(const Logger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.Logger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logger::IsInitialized() const {
  return true;
}

void Logger::InternalSwap(Logger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(log_options_, other->log_options_);
  swap(log_type_, other->log_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputOptions::InitAsDefaultInstance() {
}
class OutputOptions::_Internal {
 public:
};

OutputOptions::OutputOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.OutputOptions)
}
OutputOptions::OutputOptions(const OutputOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      loggers_(from.loggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&suppress_output_, &from.suppress_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_error_to_output_) -
    reinterpret_cast<char*>(&suppress_output_)) + sizeof(redirect_error_to_output_));
  // @@protoc_insertion_point(copy_constructor:jasper.OutputOptions)
}

void OutputOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputOptions_jasper_2eproto.base);
  ::memset(&suppress_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_error_to_output_) -
      reinterpret_cast<char*>(&suppress_output_)) + sizeof(redirect_error_to_output_));
}

OutputOptions::~OutputOptions() {
  // @@protoc_insertion_point(destructor:jasper.OutputOptions)
  SharedDtor();
}

void OutputOptions::SharedDtor() {
}

void OutputOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputOptions& OutputOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void OutputOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.OutputOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loggers_.Clear();
  ::memset(&suppress_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_error_to_output_) -
      reinterpret_cast<char*>(&suppress_output_)) + sizeof(redirect_error_to_output_));
  _internal_metadata_.Clear();
}

const char* OutputOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jasper.Logger loggers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool suppress_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          suppress_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool suppress_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          suppress_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool redirect_output_to_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          redirect_output_to_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool redirect_error_to_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          redirect_error_to_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.OutputOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jasper.Logger loggers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loggers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_loggers(i), target, stream);
  }

  // bool suppress_output = 2;
  if (this->suppress_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_suppress_output(), target);
  }

  // bool suppress_error = 3;
  if (this->suppress_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_suppress_error(), target);
  }

  // bool redirect_output_to_error = 4;
  if (this->redirect_output_to_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_redirect_output_to_error(), target);
  }

  // bool redirect_error_to_output = 5;
  if (this->redirect_error_to_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_redirect_error_to_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.OutputOptions)
  return target;
}

size_t OutputOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.OutputOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jasper.Logger loggers = 1;
  total_size += 1UL * this->_internal_loggers_size();
  for (const auto& msg : this->loggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool suppress_output = 2;
  if (this->suppress_output() != 0) {
    total_size += 1 + 1;
  }

  // bool suppress_error = 3;
  if (this->suppress_error() != 0) {
    total_size += 1 + 1;
  }

  // bool redirect_output_to_error = 4;
  if (this->redirect_output_to_error() != 0) {
    total_size += 1 + 1;
  }

  // bool redirect_error_to_output = 5;
  if (this->redirect_error_to_output() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.OutputOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.OutputOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.OutputOptions)
    MergeFrom(*source);
  }
}

void OutputOptions::MergeFrom(const OutputOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.OutputOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loggers_.MergeFrom(from.loggers_);
  if (from.suppress_output() != 0) {
    _internal_set_suppress_output(from._internal_suppress_output());
  }
  if (from.suppress_error() != 0) {
    _internal_set_suppress_error(from._internal_suppress_error());
  }
  if (from.redirect_output_to_error() != 0) {
    _internal_set_redirect_output_to_error(from._internal_redirect_output_to_error());
  }
  if (from.redirect_error_to_output() != 0) {
    _internal_set_redirect_error_to_output(from._internal_redirect_error_to_output());
  }
}

void OutputOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.OutputOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputOptions::CopyFrom(const OutputOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.OutputOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputOptions::IsInitialized() const {
  return true;
}

void OutputOptions::InternalSwap(OutputOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loggers_.InternalSwap(&other->loggers_);
  swap(suppress_output_, other->suppress_output_);
  swap(suppress_error_, other->suppress_error_);
  swap(redirect_output_to_error_, other->redirect_output_to_error_);
  swap(redirect_error_to_output_, other->redirect_error_to_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogOptions::InitAsDefaultInstance() {
  ::jasper::_LogOptions_default_instance_._instance.get_mutable()->buffer_options_ = const_cast< ::jasper::BufferOptions*>(
      ::jasper::BufferOptions::internal_default_instance());
  ::jasper::_LogOptions_default_instance_._instance.get_mutable()->buildlogger_options_ = const_cast< ::jasper::BuildloggerOptions*>(
      ::jasper::BuildloggerOptions::internal_default_instance());
  ::jasper::_LogOptions_default_instance_._instance.get_mutable()->splunk_options_ = const_cast< ::jasper::SplunkOptions*>(
      ::jasper::SplunkOptions::internal_default_instance());
}
class LogOptions::_Internal {
 public:
  static const ::jasper::BufferOptions& buffer_options(const LogOptions* msg);
  static const ::jasper::BuildloggerOptions& buildlogger_options(const LogOptions* msg);
  static const ::jasper::SplunkOptions& splunk_options(const LogOptions* msg);
};

const ::jasper::BufferOptions&
LogOptions::_Internal::buffer_options(const LogOptions* msg) {
  return *msg->buffer_options_;
}
const ::jasper::BuildloggerOptions&
LogOptions::_Internal::buildlogger_options(const LogOptions* msg) {
  return *msg->buildlogger_options_;
}
const ::jasper::SplunkOptions&
LogOptions::_Internal::splunk_options(const LogOptions* msg) {
  return *msg->splunk_options_;
}
LogOptions::LogOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.LogOptions)
}
LogOptions::LogOptions(const LogOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_prefix().empty()) {
    default_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_prefix_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  sumo_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sumo_endpoint().empty()) {
    sumo_endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sumo_endpoint_);
  }
  if (from._internal_has_buffer_options()) {
    buffer_options_ = new ::jasper::BufferOptions(*from.buffer_options_);
  } else {
    buffer_options_ = nullptr;
  }
  if (from._internal_has_buildlogger_options()) {
    buildlogger_options_ = new ::jasper::BuildloggerOptions(*from.buildlogger_options_);
  } else {
    buildlogger_options_ = nullptr;
  }
  if (from._internal_has_splunk_options()) {
    splunk_options_ = new ::jasper::SplunkOptions(*from.splunk_options_);
  } else {
    splunk_options_ = nullptr;
  }
  in_memory_cap_ = from.in_memory_cap_;
  // @@protoc_insertion_point(copy_constructor:jasper.LogOptions)
}

void LogOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogOptions_jasper_2eproto.base);
  default_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sumo_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buffer_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_memory_cap_) -
      reinterpret_cast<char*>(&buffer_options_)) + sizeof(in_memory_cap_));
}

LogOptions::~LogOptions() {
  // @@protoc_insertion_point(destructor:jasper.LogOptions)
  SharedDtor();
}

void LogOptions::SharedDtor() {
  default_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sumo_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buffer_options_;
  if (this != internal_default_instance()) delete buildlogger_options_;
  if (this != internal_default_instance()) delete splunk_options_;
}

void LogOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogOptions& LogOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void LogOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.LogOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  default_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sumo_endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && buffer_options_ != nullptr) {
    delete buffer_options_;
  }
  buffer_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && buildlogger_options_ != nullptr) {
    delete buildlogger_options_;
  }
  buildlogger_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && splunk_options_ != nullptr) {
    delete splunk_options_;
  }
  splunk_options_ = nullptr;
  in_memory_cap_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LogOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jasper.BufferOptions buffer_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jasper.BuildloggerOptions buildlogger_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildlogger_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string default_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_default_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.LogOptions.default_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.LogOptions.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.LogOptions.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 in_memory_cap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          in_memory_cap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jasper.SplunkOptions splunk_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_splunk_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sumo_endpoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sumo_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.LogOptions.sumo_endpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.LogOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jasper.BufferOptions buffer_options = 1;
  if (this->has_buffer_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::buffer_options(this), target, stream);
  }

  // .jasper.BuildloggerOptions buildlogger_options = 2;
  if (this->has_buildlogger_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buildlogger_options(this), target, stream);
  }

  // string default_prefix = 3;
  if (this->default_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_prefix().data(), static_cast<int>(this->_internal_default_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.LogOptions.default_prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_default_prefix(), target);
  }

  // string file_name = 4;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.LogOptions.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // string format = 5;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.LogOptions.format");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_format(), target);
  }

  // int64 in_memory_cap = 6;
  if (this->in_memory_cap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_in_memory_cap(), target);
  }

  // .jasper.SplunkOptions splunk_options = 7;
  if (this->has_splunk_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::splunk_options(this), target, stream);
  }

  // string sumo_endpoint = 8;
  if (this->sumo_endpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sumo_endpoint().data(), static_cast<int>(this->_internal_sumo_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.LogOptions.sumo_endpoint");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sumo_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.LogOptions)
  return target;
}

size_t LogOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.LogOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string default_prefix = 3;
  if (this->default_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_prefix());
  }

  // string file_name = 4;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string format = 5;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string sumo_endpoint = 8;
  if (this->sumo_endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sumo_endpoint());
  }

  // .jasper.BufferOptions buffer_options = 1;
  if (this->has_buffer_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buffer_options_);
  }

  // .jasper.BuildloggerOptions buildlogger_options = 2;
  if (this->has_buildlogger_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buildlogger_options_);
  }

  // .jasper.SplunkOptions splunk_options = 7;
  if (this->has_splunk_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *splunk_options_);
  }

  // int64 in_memory_cap = 6;
  if (this->in_memory_cap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_in_memory_cap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.LogOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const LogOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.LogOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.LogOptions)
    MergeFrom(*source);
  }
}

void LogOptions::MergeFrom(const LogOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.LogOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.default_prefix().size() > 0) {

    default_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_prefix_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.sumo_endpoint().size() > 0) {

    sumo_endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sumo_endpoint_);
  }
  if (from.has_buffer_options()) {
    _internal_mutable_buffer_options()->::jasper::BufferOptions::MergeFrom(from._internal_buffer_options());
  }
  if (from.has_buildlogger_options()) {
    _internal_mutable_buildlogger_options()->::jasper::BuildloggerOptions::MergeFrom(from._internal_buildlogger_options());
  }
  if (from.has_splunk_options()) {
    _internal_mutable_splunk_options()->::jasper::SplunkOptions::MergeFrom(from._internal_splunk_options());
  }
  if (from.in_memory_cap() != 0) {
    _internal_set_in_memory_cap(from._internal_in_memory_cap());
  }
}

void LogOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.LogOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOptions::CopyFrom(const LogOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.LogOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOptions::IsInitialized() const {
  return true;
}

void LogOptions::InternalSwap(LogOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  default_prefix_.Swap(&other->default_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sumo_endpoint_.Swap(&other->sumo_endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buffer_options_, other->buffer_options_);
  swap(buildlogger_options_, other->buildlogger_options_);
  swap(splunk_options_, other->splunk_options_);
  swap(in_memory_cap_, other->in_memory_cap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BufferOptions::InitAsDefaultInstance() {
}
class BufferOptions::_Internal {
 public:
};

BufferOptions::BufferOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.BufferOptions)
}
BufferOptions::BufferOptions(const BufferOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffered_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(buffered_));
  // @@protoc_insertion_point(copy_constructor:jasper.BufferOptions)
}

void BufferOptions::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffered_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(buffered_));
}

BufferOptions::~BufferOptions() {
  // @@protoc_insertion_point(destructor:jasper.BufferOptions)
  SharedDtor();
}

void BufferOptions::SharedDtor() {
}

void BufferOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BufferOptions& BufferOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BufferOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void BufferOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.BufferOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffered_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(buffered_));
  _internal_metadata_.Clear();
}

const char* BufferOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool buffered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BufferOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.BufferOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool buffered = 1;
  if (this->buffered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_buffered(), target);
  }

  // int64 duration = 2;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.BufferOptions)
  return target;
}

size_t BufferOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.BufferOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_size());
  }

  // bool buffered = 1;
  if (this->buffered() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BufferOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.BufferOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BufferOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BufferOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.BufferOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.BufferOptions)
    MergeFrom(*source);
  }
}

void BufferOptions::MergeFrom(const BufferOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.BufferOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
  if (from.buffered() != 0) {
    _internal_set_buffered(from._internal_buffered());
  }
}

void BufferOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.BufferOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferOptions::CopyFrom(const BufferOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.BufferOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferOptions::IsInitialized() const {
  return true;
}

void BufferOptions::InternalSwap(BufferOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
  swap(max_size_, other->max_size_);
  swap(buffered_, other->buffered_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildloggerOptions::InitAsDefaultInstance() {
}
class BuildloggerOptions::_Internal {
 public:
};

BuildloggerOptions::BuildloggerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.BuildloggerOptions)
}
BuildloggerOptions::BuildloggerOptions(const BuildloggerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phase().empty()) {
    phase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  builder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_builder().empty()) {
    builder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.builder_);
  }
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test().empty()) {
    test_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test_);
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_test_) -
    reinterpret_cast<char*>(&number_)) + sizeof(create_test_));
  // @@protoc_insertion_point(copy_constructor:jasper.BuildloggerOptions)
}

void BuildloggerOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildloggerOptions_jasper_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  builder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_test_) -
      reinterpret_cast<char*>(&number_)) + sizeof(create_test_));
}

BuildloggerOptions::~BuildloggerOptions() {
  // @@protoc_insertion_point(destructor:jasper.BuildloggerOptions)
  SharedDtor();
}

void BuildloggerOptions::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  builder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildloggerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildloggerOptions& BuildloggerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildloggerOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void BuildloggerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.BuildloggerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phase_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  builder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_test_) -
      reinterpret_cast<char*>(&number_)) + sizeof(create_test_));
  _internal_metadata_.Clear();
}

const char* BuildloggerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool create_test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          create_test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildloggerOptions.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildloggerOptions.phase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string builder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_builder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildloggerOptions.builder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildloggerOptions.test"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildloggerOptions.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildloggerOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.BuildloggerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool create_test = 1;
  if (this->create_test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_create_test(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildloggerOptions.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // int64 number = 3;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_number(), target);
  }

  // string phase = 4;
  if (this->phase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phase().data(), static_cast<int>(this->_internal_phase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildloggerOptions.phase");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phase(), target);
  }

  // string builder = 5;
  if (this->builder().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_builder().data(), static_cast<int>(this->_internal_builder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildloggerOptions.builder");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_builder(), target);
  }

  // string test = 6;
  if (this->test().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildloggerOptions.test");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_test(), target);
  }

  // string command = 7;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildloggerOptions.command");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.BuildloggerOptions)
  return target;
}

size_t BuildloggerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.BuildloggerOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string phase = 4;
  if (this->phase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phase());
  }

  // string builder = 5;
  if (this->builder().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_builder());
  }

  // string test = 6;
  if (this->test().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }

  // string command = 7;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // int64 number = 3;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  // bool create_test = 1;
  if (this->create_test() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildloggerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.BuildloggerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildloggerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildloggerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.BuildloggerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.BuildloggerOptions)
    MergeFrom(*source);
  }
}

void BuildloggerOptions::MergeFrom(const BuildloggerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.BuildloggerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.phase().size() > 0) {

    phase_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  if (from.builder().size() > 0) {

    builder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.builder_);
  }
  if (from.test().size() > 0) {

    test_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.test_);
  }
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.create_test() != 0) {
    _internal_set_create_test(from._internal_create_test());
  }
}

void BuildloggerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.BuildloggerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildloggerOptions::CopyFrom(const BuildloggerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.BuildloggerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildloggerOptions::IsInitialized() const {
  return true;
}

void BuildloggerOptions::InternalSwap(BuildloggerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phase_.Swap(&other->phase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  builder_.Swap(&other->builder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
  swap(create_test_, other->create_test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildloggerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplunkOptions::InitAsDefaultInstance() {
}
class SplunkOptions::_Internal {
 public:
};

SplunkOptions::SplunkOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.SplunkOptions)
}
SplunkOptions::SplunkOptions(const SplunkOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  // @@protoc_insertion_point(copy_constructor:jasper.SplunkOptions)
}

void SplunkOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplunkOptions_jasper_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SplunkOptions::~SplunkOptions() {
  // @@protoc_insertion_point(destructor:jasper.SplunkOptions)
  SharedDtor();
}

void SplunkOptions::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SplunkOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplunkOptions& SplunkOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplunkOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void SplunkOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.SplunkOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SplunkOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.SplunkOptions.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.SplunkOptions.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.SplunkOptions.channel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplunkOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.SplunkOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.SplunkOptions.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.SplunkOptions.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.SplunkOptions.channel");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.SplunkOptions)
  return target;
}

size_t SplunkOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.SplunkOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string channel = 3;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplunkOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.SplunkOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SplunkOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplunkOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.SplunkOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.SplunkOptions)
    MergeFrom(*source);
  }
}

void SplunkOptions::MergeFrom(const SplunkOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.SplunkOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
}

void SplunkOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.SplunkOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplunkOptions::CopyFrom(const SplunkOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.SplunkOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplunkOptions::IsInitialized() const {
  return true;
}

void SplunkOptions::InternalSwap(SplunkOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SplunkOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CreateOptions_EnvironmentEntry_DoNotUse::CreateOptions_EnvironmentEntry_DoNotUse() {}
CreateOptions_EnvironmentEntry_DoNotUse::CreateOptions_EnvironmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateOptions_EnvironmentEntry_DoNotUse::MergeFrom(const CreateOptions_EnvironmentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateOptions_EnvironmentEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateOptions_EnvironmentEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CreateOptions::InitAsDefaultInstance() {
  ::jasper::_CreateOptions_default_instance_._instance.get_mutable()->output_ = const_cast< ::jasper::OutputOptions*>(
      ::jasper::OutputOptions::internal_default_instance());
}
class CreateOptions::_Internal {
 public:
  static const ::jasper::OutputOptions& output(const CreateOptions* msg);
};

const ::jasper::OutputOptions&
CreateOptions::_Internal::output(const CreateOptions* msg) {
  return *msg->output_;
}
CreateOptions::CreateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.CreateOptions)
}
CreateOptions::CreateOptions(const CreateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_),
      tags_(from.tags_),
      on_success_(from.on_success_),
      on_failure_(from.on_failure_),
      on_timeout_(from.on_timeout_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  environment_.MergeFrom(from.environment_);
  working_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_working_directory().empty()) {
    working_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.working_directory_);
  }
  if (from._internal_has_output()) {
    output_ = new ::jasper::OutputOptions(*from.output_);
  } else {
    output_ = nullptr;
  }
  ::memcpy(&timeout_seconds_, &from.timeout_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&override_environ_) -
    reinterpret_cast<char*>(&timeout_seconds_)) + sizeof(override_environ_));
  // @@protoc_insertion_point(copy_constructor:jasper.CreateOptions)
}

void CreateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateOptions_jasper_2eproto.base);
  working_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&override_environ_) -
      reinterpret_cast<char*>(&output_)) + sizeof(override_environ_));
}

CreateOptions::~CreateOptions() {
  // @@protoc_insertion_point(destructor:jasper.CreateOptions)
  SharedDtor();
}

void CreateOptions::SharedDtor() {
  working_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete output_;
}

void CreateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateOptions& CreateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void CreateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.CreateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  environment_.Clear();
  tags_.Clear();
  on_success_.Clear();
  on_failure_.Clear();
  on_timeout_.Clear();
  working_directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  ::memset(&timeout_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&override_environ_) -
      reinterpret_cast<char*>(&timeout_seconds_)) + sizeof(override_environ_));
  _internal_metadata_.Clear();
}

const char* CreateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.CreateOptions.args"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string working_directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_working_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.CreateOptions.working_directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&environment_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool override_environ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          override_environ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeout_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.CreateOptions.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .jasper.CreateOptions on_success = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_on_success(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .jasper.CreateOptions on_failure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_on_failure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .jasper.CreateOptions on_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_on_timeout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .jasper.OutputOptions output = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.CreateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string args = 1;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.CreateOptions.args");
    target = stream->WriteString(1, s, target);
  }

  // string working_directory = 2;
  if (this->working_directory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_working_directory().data(), static_cast<int>(this->_internal_working_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.CreateOptions.working_directory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_working_directory(), target);
  }

  // map<string, string> environment = 3;
  if (!this->_internal_environment().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "jasper.CreateOptions.EnvironmentEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "jasper.CreateOptions.EnvironmentEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_environment().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_environment().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_environment().begin();
          it != this->_internal_environment().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateOptions_EnvironmentEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_environment().begin();
          it != this->_internal_environment().end(); ++it) {
        target = CreateOptions_EnvironmentEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool override_environ = 4;
  if (this->override_environ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_override_environ(), target);
  }

  // int64 timeout_seconds = 5;
  if (this->timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timeout_seconds(), target);
  }

  // repeated string tags = 6;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.CreateOptions.tags");
    target = stream->WriteString(6, s, target);
  }

  // repeated .jasper.CreateOptions on_success = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_on_success_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_on_success(i), target, stream);
  }

  // repeated .jasper.CreateOptions on_failure = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_on_failure_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_on_failure(i), target, stream);
  }

  // repeated .jasper.CreateOptions on_timeout = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_on_timeout_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_on_timeout(i), target, stream);
  }

  // .jasper.OutputOptions output = 10;
  if (this->has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.CreateOptions)
  return target;
}

size_t CreateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.CreateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      args_.Get(i));
  }

  // map<string, string> environment = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_environment_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_environment().begin();
      it != this->_internal_environment().end(); ++it) {
    total_size += CreateOptions_EnvironmentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated .jasper.CreateOptions on_success = 7;
  total_size += 1UL * this->_internal_on_success_size();
  for (const auto& msg : this->on_success_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .jasper.CreateOptions on_failure = 8;
  total_size += 1UL * this->_internal_on_failure_size();
  for (const auto& msg : this->on_failure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .jasper.CreateOptions on_timeout = 9;
  total_size += 1UL * this->_internal_on_timeout_size();
  for (const auto& msg : this->on_timeout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string working_directory = 2;
  if (this->working_directory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_working_directory());
  }

  // .jasper.OutputOptions output = 10;
  if (this->has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  // int64 timeout_seconds = 5;
  if (this->timeout_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout_seconds());
  }

  // bool override_environ = 4;
  if (this->override_environ() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.CreateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.CreateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.CreateOptions)
    MergeFrom(*source);
  }
}

void CreateOptions::MergeFrom(const CreateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.CreateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  environment_.MergeFrom(from.environment_);
  tags_.MergeFrom(from.tags_);
  on_success_.MergeFrom(from.on_success_);
  on_failure_.MergeFrom(from.on_failure_);
  on_timeout_.MergeFrom(from.on_timeout_);
  if (from.working_directory().size() > 0) {

    working_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.working_directory_);
  }
  if (from.has_output()) {
    _internal_mutable_output()->::jasper::OutputOptions::MergeFrom(from._internal_output());
  }
  if (from.timeout_seconds() != 0) {
    _internal_set_timeout_seconds(from._internal_timeout_seconds());
  }
  if (from.override_environ() != 0) {
    _internal_set_override_environ(from._internal_override_environ());
  }
}

void CreateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.CreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOptions::CopyFrom(const CreateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.CreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOptions::IsInitialized() const {
  return true;
}

void CreateOptions::InternalSwap(CreateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  environment_.Swap(&other->environment_);
  tags_.InternalSwap(&other->tags_);
  on_success_.InternalSwap(&other->on_success_);
  on_failure_.InternalSwap(&other->on_failure_);
  on_timeout_.InternalSwap(&other->on_timeout_);
  working_directory_.Swap(&other->working_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(output_, other->output_);
  swap(timeout_seconds_, other->timeout_seconds_);
  swap(override_environ_, other->override_environ_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessInfo::InitAsDefaultInstance() {
  ::jasper::_ProcessInfo_default_instance_._instance.get_mutable()->options_ = const_cast< ::jasper::CreateOptions*>(
      ::jasper::CreateOptions::internal_default_instance());
}
class ProcessInfo::_Internal {
 public:
  static const ::jasper::CreateOptions& options(const ProcessInfo* msg);
};

const ::jasper::CreateOptions&
ProcessInfo::_Internal::options(const ProcessInfo* msg) {
  return *msg->options_;
}
ProcessInfo::ProcessInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.ProcessInfo)
}
ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  host_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_id().empty()) {
    host_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_id_);
  }
  if (from._internal_has_options()) {
    options_ = new ::jasper::CreateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timedout_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(timedout_));
  // @@protoc_insertion_point(copy_constructor:jasper.ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessInfo_jasper_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timedout_) -
      reinterpret_cast<char*>(&options_)) + sizeof(timedout_));
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:jasper.ProcessInfo)
  SharedDtor();
}

void ProcessInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void ProcessInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessInfo& ProcessInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessInfo_jasper_2eproto.base);
  return *internal_default_instance();
}


void ProcessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timedout_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(timedout_));
  _internal_metadata_.Clear();
}

const char* ProcessInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.ProcessInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_host_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.ProcessInfo.host_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool running = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool successful = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool complete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool timedout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timedout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jasper.CreateOptions options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.ProcessInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.ProcessInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pid(), target);
  }

  // string host_id = 3;
  if (this->host_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_id().data(), static_cast<int>(this->_internal_host_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.ProcessInfo.host_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host_id(), target);
  }

  // bool running = 4;
  if (this->running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_running(), target);
  }

  // bool successful = 5;
  if (this->successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_successful(), target);
  }

  // bool complete = 6;
  if (this->complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_complete(), target);
  }

  // bool timedout = 7;
  if (this->timedout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_timedout(), target);
  }

  // .jasper.CreateOptions options = 8;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.ProcessInfo)
  return target;
}

size_t ProcessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.ProcessInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string host_id = 3;
  if (this->host_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_id());
  }

  // .jasper.CreateOptions options = 8;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // int64 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  // bool running = 4;
  if (this->running() != 0) {
    total_size += 1 + 1;
  }

  // bool successful = 5;
  if (this->successful() != 0) {
    total_size += 1 + 1;
  }

  // bool complete = 6;
  if (this->complete() != 0) {
    total_size += 1 + 1;
  }

  // bool timedout = 7;
  if (this->timedout() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.ProcessInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.ProcessInfo)
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.ProcessInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.host_id().size() > 0) {

    host_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_id_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::jasper::CreateOptions::MergeFrom(from._internal_options());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.running() != 0) {
    _internal_set_running(from._internal_running());
  }
  if (from.successful() != 0) {
    _internal_set_successful(from._internal_successful());
  }
  if (from.complete() != 0) {
    _internal_set_complete(from._internal_complete());
  }
  if (from.timedout() != 0) {
    _internal_set_timedout(from._internal_timedout());
  }
}

void ProcessInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.ProcessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {
  return true;
}

void ProcessInfo::InternalSwap(ProcessInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_id_.Swap(&other->host_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(pid_, other->pid_);
  swap(running_, other->running_);
  swap(successful_, other->successful_);
  swap(complete_, other->complete_);
  swap(timedout_, other->timedout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusResponse::InitAsDefaultInstance() {
}
class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_id().empty()) {
    host_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_id_);
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:jasper.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusResponse_jasper_2eproto.base);
  host_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_ = false;
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:jasper.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  host_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusResponse_jasper_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  _internal_metadata_.Clear();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.StatusResponse.host_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_id = 1;
  if (this->host_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_id().data(), static_cast<int>(this->_internal_host_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.StatusResponse.host_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_id(), target);
  }

  // bool active = 2;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_id = 1;
  if (this->host_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_id());
  }

  // bool active = 2;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_id().size() > 0) {

    host_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_id_);
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_id_.Swap(&other->host_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Filter::InitAsDefaultInstance() {
}
class Filter::_Internal {
 public:
};

Filter::Filter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:jasper.Filter)
}

void Filter::SharedCtor() {
  name_ = 0;
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:jasper.Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
}

void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter& Filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Filter_jasper_2eproto.base);
  return *internal_default_instance();
}


void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_ = 0;
  _internal_metadata_.Clear();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jasper.FilterSpecifications name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_name(static_cast<::jasper::FilterSpecifications>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jasper.FilterSpecifications name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jasper.FilterSpecifications name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
}

void Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(name_, other->name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalProcess::InitAsDefaultInstance() {
  ::jasper::_SignalProcess_default_instance_._instance.get_mutable()->processid_ = const_cast< ::jasper::JasperProcessID*>(
      ::jasper::JasperProcessID::internal_default_instance());
}
class SignalProcess::_Internal {
 public:
  static const ::jasper::JasperProcessID& processid(const SignalProcess* msg);
};

const ::jasper::JasperProcessID&
SignalProcess::_Internal::processid(const SignalProcess* msg) {
  return *msg->processid_;
}
SignalProcess::SignalProcess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.SignalProcess)
}
SignalProcess::SignalProcess(const SignalProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_processid()) {
    processid_ = new ::jasper::JasperProcessID(*from.processid_);
  } else {
    processid_ = nullptr;
  }
  signal_ = from.signal_;
  // @@protoc_insertion_point(copy_constructor:jasper.SignalProcess)
}

void SignalProcess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalProcess_jasper_2eproto.base);
  ::memset(&processid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&processid_)) + sizeof(signal_));
}

SignalProcess::~SignalProcess() {
  // @@protoc_insertion_point(destructor:jasper.SignalProcess)
  SharedDtor();
}

void SignalProcess::SharedDtor() {
  if (this != internal_default_instance()) delete processid_;
}

void SignalProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalProcess& SignalProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalProcess_jasper_2eproto.base);
  return *internal_default_instance();
}


void SignalProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.SignalProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && processid_ != nullptr) {
    delete processid_;
  }
  processid_ = nullptr;
  signal_ = 0;
  _internal_metadata_.Clear();
}

const char* SignalProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jasper.JasperProcessID ProcessID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jasper.Signals signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_signal(static_cast<::jasper::Signals>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.SignalProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jasper.JasperProcessID ProcessID = 1;
  if (this->has_processid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::processid(this), target, stream);
  }

  // .jasper.Signals signal = 2;
  if (this->signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_signal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.SignalProcess)
  return target;
}

size_t SignalProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.SignalProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jasper.JasperProcessID ProcessID = 1;
  if (this->has_processid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processid_);
  }

  // .jasper.Signals signal = 2;
  if (this->signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.SignalProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.SignalProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.SignalProcess)
    MergeFrom(*source);
  }
}

void SignalProcess::MergeFrom(const SignalProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.SignalProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_processid()) {
    _internal_mutable_processid()->::jasper::JasperProcessID::MergeFrom(from._internal_processid());
  }
  if (from.signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
}

void SignalProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.SignalProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalProcess::CopyFrom(const SignalProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.SignalProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalProcess::IsInitialized() const {
  return true;
}

void SignalProcess::InternalSwap(SignalProcess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(processid_, other->processid_);
  swap(signal_, other->signal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TagName::InitAsDefaultInstance() {
}
class TagName::_Internal {
 public:
};

TagName::TagName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.TagName)
}
TagName::TagName(const TagName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:jasper.TagName)
}

void TagName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TagName_jasper_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TagName::~TagName() {
  // @@protoc_insertion_point(destructor:jasper.TagName)
  SharedDtor();
}

void TagName::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TagName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagName& TagName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TagName_jasper_2eproto.base);
  return *internal_default_instance();
}


void TagName::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.TagName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TagName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.TagName.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.TagName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.TagName.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.TagName)
  return target;
}

size_t TagName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.TagName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.TagName)
  GOOGLE_DCHECK_NE(&from, this);
  const TagName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TagName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.TagName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.TagName)
    MergeFrom(*source);
  }
}

void TagName::MergeFrom(const TagName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.TagName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void TagName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.TagName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagName::CopyFrom(const TagName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.TagName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagName::IsInitialized() const {
  return true;
}

void TagName::InternalSwap(TagName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TagName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessTags::InitAsDefaultInstance() {
}
class ProcessTags::_Internal {
 public:
};

ProcessTags::ProcessTags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.ProcessTags)
}
ProcessTags::ProcessTags(const ProcessTags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  processid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processid().empty()) {
    processid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processid_);
  }
  // @@protoc_insertion_point(copy_constructor:jasper.ProcessTags)
}

void ProcessTags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessTags_jasper_2eproto.base);
  processid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcessTags::~ProcessTags() {
  // @@protoc_insertion_point(destructor:jasper.ProcessTags)
  SharedDtor();
}

void ProcessTags::SharedDtor() {
  processid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessTags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessTags& ProcessTags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessTags_jasper_2eproto.base);
  return *internal_default_instance();
}


void ProcessTags::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.ProcessTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  processid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProcessTags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string processID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_processid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.ProcessTags.processID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.ProcessTags.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessTags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.ProcessTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string processID = 1;
  if (this->processid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processid().data(), static_cast<int>(this->_internal_processid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.ProcessTags.processID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_processid(), target);
  }

  // repeated string tags = 2;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.ProcessTags.tags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.ProcessTags)
  return target;
}

size_t ProcessTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.ProcessTags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string processID = 1;
  if (this->processid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.ProcessTags)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessTags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.ProcessTags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.ProcessTags)
    MergeFrom(*source);
  }
}

void ProcessTags::MergeFrom(const ProcessTags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.ProcessTags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.processid().size() > 0) {

    processid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processid_);
  }
}

void ProcessTags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.ProcessTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTags::CopyFrom(const ProcessTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.ProcessTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTags::IsInitialized() const {
  return true;
}

void ProcessTags::InternalSwap(ProcessTags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  processid_.Swap(&other->processid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JasperProcessID::InitAsDefaultInstance() {
}
class JasperProcessID::_Internal {
 public:
};

JasperProcessID::JasperProcessID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.JasperProcessID)
}
JasperProcessID::JasperProcessID(const JasperProcessID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:jasper.JasperProcessID)
}

void JasperProcessID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JasperProcessID_jasper_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JasperProcessID::~JasperProcessID() {
  // @@protoc_insertion_point(destructor:jasper.JasperProcessID)
  SharedDtor();
}

void JasperProcessID::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JasperProcessID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JasperProcessID& JasperProcessID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JasperProcessID_jasper_2eproto.base);
  return *internal_default_instance();
}


void JasperProcessID::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.JasperProcessID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* JasperProcessID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.JasperProcessID.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JasperProcessID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.JasperProcessID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.JasperProcessID.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.JasperProcessID)
  return target;
}

size_t JasperProcessID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.JasperProcessID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JasperProcessID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.JasperProcessID)
  GOOGLE_DCHECK_NE(&from, this);
  const JasperProcessID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JasperProcessID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.JasperProcessID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.JasperProcessID)
    MergeFrom(*source);
  }
}

void JasperProcessID::MergeFrom(const JasperProcessID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.JasperProcessID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void JasperProcessID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.JasperProcessID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JasperProcessID::CopyFrom(const JasperProcessID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.JasperProcessID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JasperProcessID::IsInitialized() const {
  return true;
}

void JasperProcessID::InternalSwap(JasperProcessID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata JasperProcessID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationOutcome::InitAsDefaultInstance() {
}
class OperationOutcome::_Internal {
 public:
};

OperationOutcome::OperationOutcome()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.OperationOutcome)
}
OperationOutcome::OperationOutcome(const OperationOutcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:jasper.OperationOutcome)
}

void OperationOutcome::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationOutcome_jasper_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

OperationOutcome::~OperationOutcome() {
  // @@protoc_insertion_point(destructor:jasper.OperationOutcome)
  SharedDtor();
}

void OperationOutcome::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationOutcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationOutcome& OperationOutcome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationOutcome_jasper_2eproto.base);
  return *internal_default_instance();
}


void OperationOutcome::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.OperationOutcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* OperationOutcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.OperationOutcome.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationOutcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.OperationOutcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.OperationOutcome.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.OperationOutcome)
  return target;
}

size_t OperationOutcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.OperationOutcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationOutcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.OperationOutcome)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationOutcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationOutcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.OperationOutcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.OperationOutcome)
    MergeFrom(*source);
  }
}

void OperationOutcome::MergeFrom(const OperationOutcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.OperationOutcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void OperationOutcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.OperationOutcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationOutcome::CopyFrom(const OperationOutcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.OperationOutcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationOutcome::IsInitialized() const {
  return true;
}

void OperationOutcome::InternalSwap(OperationOutcome* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationOutcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildOptions::InitAsDefaultInstance() {
}
class BuildOptions::_Internal {
 public:
};

BuildOptions::BuildOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.BuildOptions)
}
BuildOptions::BuildOptions(const BuildOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arch().empty()) {
    arch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
  edition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edition().empty()) {
    edition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.edition_);
  }
  debug_ = from.debug_;
  // @@protoc_insertion_point(copy_constructor:jasper.BuildOptions)
}

void BuildOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildOptions_jasper_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_ = false;
}

BuildOptions::~BuildOptions() {
  // @@protoc_insertion_point(destructor:jasper.BuildOptions)
  SharedDtor();
}

void BuildOptions::SharedDtor() {
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildOptions& BuildOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void BuildOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.BuildOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_ = false;
  _internal_metadata_.Clear();
}

const char* BuildOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildOptions.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string arch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_arch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildOptions.arch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_edition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildOptions.edition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.BuildOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildOptions.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // string arch = 2;
  if (this->arch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildOptions.arch");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arch(), target);
  }

  // string edition = 3;
  if (this->edition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edition().data(), static_cast<int>(this->_internal_edition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildOptions.edition");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_edition(), target);
  }

  // bool debug = 4;
  if (this->debug() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.BuildOptions)
  return target;
}

size_t BuildOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.BuildOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string arch = 2;
  if (this->arch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string edition = 3;
  if (this->edition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edition());
  }

  // bool debug = 4;
  if (this->debug() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.BuildOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.BuildOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.BuildOptions)
    MergeFrom(*source);
  }
}

void BuildOptions::MergeFrom(const BuildOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.BuildOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.arch().size() > 0) {

    arch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
  if (from.edition().size() > 0) {

    edition_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.edition_);
  }
  if (from.debug() != 0) {
    _internal_set_debug(from._internal_debug());
  }
}

void BuildOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.BuildOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildOptions::CopyFrom(const BuildOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.BuildOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildOptions::IsInitialized() const {
  return true;
}

void BuildOptions::InternalSwap(BuildOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  arch_.Swap(&other->arch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  edition_.Swap(&other->edition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(debug_, other->debug_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MongoDBDownloadOptions::InitAsDefaultInstance() {
  ::jasper::_MongoDBDownloadOptions_default_instance_._instance.get_mutable()->build_options_ = const_cast< ::jasper::BuildOptions*>(
      ::jasper::BuildOptions::internal_default_instance());
}
class MongoDBDownloadOptions::_Internal {
 public:
  static const ::jasper::BuildOptions& build_options(const MongoDBDownloadOptions* msg);
};

const ::jasper::BuildOptions&
MongoDBDownloadOptions::_Internal::build_options(const MongoDBDownloadOptions* msg) {
  return *msg->build_options_;
}
MongoDBDownloadOptions::MongoDBDownloadOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.MongoDBDownloadOptions)
}
MongoDBDownloadOptions::MongoDBDownloadOptions(const MongoDBDownloadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      releases_(from.releases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from._internal_has_build_options()) {
    build_options_ = new ::jasper::BuildOptions(*from.build_options_);
  } else {
    build_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jasper.MongoDBDownloadOptions)
}

void MongoDBDownloadOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MongoDBDownloadOptions_jasper_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_options_ = nullptr;
}

MongoDBDownloadOptions::~MongoDBDownloadOptions() {
  // @@protoc_insertion_point(destructor:jasper.MongoDBDownloadOptions)
  SharedDtor();
}

void MongoDBDownloadOptions::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete build_options_;
}

void MongoDBDownloadOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MongoDBDownloadOptions& MongoDBDownloadOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MongoDBDownloadOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void MongoDBDownloadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.MongoDBDownloadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  releases_.Clear();
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && build_options_ != nullptr) {
    delete build_options_;
  }
  build_options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MongoDBDownloadOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jasper.BuildOptions build_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.MongoDBDownloadOptions.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string releases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_releases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.MongoDBDownloadOptions.releases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MongoDBDownloadOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.MongoDBDownloadOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jasper.BuildOptions build_options = 1;
  if (this->has_build_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::build_options(this), target, stream);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.MongoDBDownloadOptions.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // repeated string releases = 3;
  for (int i = 0, n = this->_internal_releases_size(); i < n; i++) {
    const auto& s = this->_internal_releases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.MongoDBDownloadOptions.releases");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.MongoDBDownloadOptions)
  return target;
}

size_t MongoDBDownloadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.MongoDBDownloadOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string releases = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(releases_.size());
  for (int i = 0, n = releases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      releases_.Get(i));
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .jasper.BuildOptions build_options = 1;
  if (this->has_build_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *build_options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MongoDBDownloadOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.MongoDBDownloadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MongoDBDownloadOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MongoDBDownloadOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.MongoDBDownloadOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.MongoDBDownloadOptions)
    MergeFrom(*source);
  }
}

void MongoDBDownloadOptions::MergeFrom(const MongoDBDownloadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.MongoDBDownloadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  releases_.MergeFrom(from.releases_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_build_options()) {
    _internal_mutable_build_options()->::jasper::BuildOptions::MergeFrom(from._internal_build_options());
  }
}

void MongoDBDownloadOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.MongoDBDownloadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MongoDBDownloadOptions::CopyFrom(const MongoDBDownloadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.MongoDBDownloadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoDBDownloadOptions::IsInitialized() const {
  return true;
}

void MongoDBDownloadOptions::InternalSwap(MongoDBDownloadOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  releases_.InternalSwap(&other->releases_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(build_options_, other->build_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoDBDownloadOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheOptions::InitAsDefaultInstance() {
}
class CacheOptions::_Internal {
 public:
};

CacheOptions::CacheOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.CacheOptions)
}
CacheOptions::CacheOptions(const CacheOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prune_delay_, &from.prune_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_) -
    reinterpret_cast<char*>(&prune_delay_)) + sizeof(disabled_));
  // @@protoc_insertion_point(copy_constructor:jasper.CacheOptions)
}

void CacheOptions::SharedCtor() {
  ::memset(&prune_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&prune_delay_)) + sizeof(disabled_));
}

CacheOptions::~CacheOptions() {
  // @@protoc_insertion_point(destructor:jasper.CacheOptions)
  SharedDtor();
}

void CacheOptions::SharedDtor() {
}

void CacheOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheOptions& CacheOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void CacheOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.CacheOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&prune_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&prune_delay_)) + sizeof(disabled_));
  _internal_metadata_.Clear();
}

const char* CacheOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool disabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 prune_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prune_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.CacheOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_disabled(), target);
  }

  // int64 prune_delay = 2;
  if (this->prune_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_prune_delay(), target);
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.CacheOptions)
  return target;
}

size_t CacheOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.CacheOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 prune_delay = 2;
  if (this->prune_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prune_delay());
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_size());
  }

  // bool disabled = 1;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.CacheOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.CacheOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.CacheOptions)
    MergeFrom(*source);
  }
}

void CacheOptions::MergeFrom(const CacheOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.CacheOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prune_delay() != 0) {
    _internal_set_prune_delay(from._internal_prune_delay());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
  if (from.disabled() != 0) {
    _internal_set_disabled(from._internal_disabled());
  }
}

void CacheOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.CacheOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheOptions::CopyFrom(const CacheOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.CacheOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheOptions::IsInitialized() const {
  return true;
}

void CacheOptions::InternalSwap(CacheOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(prune_delay_, other->prune_delay_);
  swap(max_size_, other->max_size_);
  swap(disabled_, other->disabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArchiveOptions::InitAsDefaultInstance() {
}
class ArchiveOptions::_Internal {
 public:
};

ArchiveOptions::ArchiveOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.ArchiveOptions)
}
ArchiveOptions::ArchiveOptions(const ArchiveOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_path().empty()) {
    target_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_path_);
  }
  ::memcpy(&should_extract_, &from.should_extract_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&should_extract_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:jasper.ArchiveOptions)
}

void ArchiveOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArchiveOptions_jasper_2eproto.base);
  target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&should_extract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&should_extract_)) + sizeof(format_));
}

ArchiveOptions::~ArchiveOptions() {
  // @@protoc_insertion_point(destructor:jasper.ArchiveOptions)
  SharedDtor();
}

void ArchiveOptions::SharedDtor() {
  target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArchiveOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArchiveOptions& ArchiveOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArchiveOptions_jasper_2eproto.base);
  return *internal_default_instance();
}


void ArchiveOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.ArchiveOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&should_extract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&should_extract_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

const char* ArchiveOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool should_extract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          should_extract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jasper.ArchiveFormat format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::jasper::ArchiveFormat>(val));
        } else goto handle_unusual;
        continue;
      // string target_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.ArchiveOptions.target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchiveOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.ArchiveOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool should_extract = 1;
  if (this->should_extract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_should_extract(), target);
  }

  // .jasper.ArchiveFormat format = 2;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  // string target_path = 3;
  if (this->target_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_path().data(), static_cast<int>(this->_internal_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.ArchiveOptions.target_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.ArchiveOptions)
  return target;
}

size_t ArchiveOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.ArchiveOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_path = 3;
  if (this->target_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_path());
  }

  // bool should_extract = 1;
  if (this->should_extract() != 0) {
    total_size += 1 + 1;
  }

  // .jasper.ArchiveFormat format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchiveOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.ArchiveOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchiveOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchiveOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.ArchiveOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.ArchiveOptions)
    MergeFrom(*source);
  }
}

void ArchiveOptions::MergeFrom(const ArchiveOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.ArchiveOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_path().size() > 0) {

    target_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_path_);
  }
  if (from.should_extract() != 0) {
    _internal_set_should_extract(from._internal_should_extract());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void ArchiveOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.ArchiveOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveOptions::CopyFrom(const ArchiveOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.ArchiveOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveOptions::IsInitialized() const {
  return true;
}

void ArchiveOptions::InternalSwap(ArchiveOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_path_.Swap(&other->target_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(should_extract_, other->should_extract_);
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchiveOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadInfo::InitAsDefaultInstance() {
  ::jasper::_DownloadInfo_default_instance_._instance.get_mutable()->archive_opts_ = const_cast< ::jasper::ArchiveOptions*>(
      ::jasper::ArchiveOptions::internal_default_instance());
}
class DownloadInfo::_Internal {
 public:
  static const ::jasper::ArchiveOptions& archive_opts(const DownloadInfo* msg);
};

const ::jasper::ArchiveOptions&
DownloadInfo::_Internal::archive_opts(const DownloadInfo* msg) {
  return *msg->archive_opts_;
}
DownloadInfo::DownloadInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.DownloadInfo)
}
DownloadInfo::DownloadInfo(const DownloadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from._internal_has_archive_opts()) {
    archive_opts_ = new ::jasper::ArchiveOptions(*from.archive_opts_);
  } else {
    archive_opts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jasper.DownloadInfo)
}

void DownloadInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadInfo_jasper_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  archive_opts_ = nullptr;
}

DownloadInfo::~DownloadInfo() {
  // @@protoc_insertion_point(destructor:jasper.DownloadInfo)
  SharedDtor();
}

void DownloadInfo::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete archive_opts_;
}

void DownloadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadInfo& DownloadInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadInfo_jasper_2eproto.base);
  return *internal_default_instance();
}


void DownloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.DownloadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && archive_opts_ != nullptr) {
    delete archive_opts_;
  }
  archive_opts_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DownloadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.DownloadInfo.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.DownloadInfo.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jasper.ArchiveOptions archive_opts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_archive_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.DownloadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.DownloadInfo.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.DownloadInfo.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // .jasper.ArchiveOptions archive_opts = 3;
  if (this->has_archive_opts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::archive_opts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.DownloadInfo)
  return target;
}

size_t DownloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.DownloadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .jasper.ArchiveOptions archive_opts = 3;
  if (this->has_archive_opts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *archive_opts_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.DownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.DownloadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.DownloadInfo)
    MergeFrom(*source);
  }
}

void DownloadInfo::MergeFrom(const DownloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.DownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_archive_opts()) {
    _internal_mutable_archive_opts()->::jasper::ArchiveOptions::MergeFrom(from._internal_archive_opts());
  }
}

void DownloadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.DownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadInfo::CopyFrom(const DownloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.DownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadInfo::IsInitialized() const {
  return true;
}

void DownloadInfo::InternalSwap(DownloadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(archive_opts_, other->archive_opts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildloggerURLs::InitAsDefaultInstance() {
}
class BuildloggerURLs::_Internal {
 public:
};

BuildloggerURLs::BuildloggerURLs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jasper.BuildloggerURLs)
}
BuildloggerURLs::BuildloggerURLs(const BuildloggerURLs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jasper.BuildloggerURLs)
}

void BuildloggerURLs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildloggerURLs_jasper_2eproto.base);
}

BuildloggerURLs::~BuildloggerURLs() {
  // @@protoc_insertion_point(destructor:jasper.BuildloggerURLs)
  SharedDtor();
}

void BuildloggerURLs::SharedDtor() {
}

void BuildloggerURLs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildloggerURLs& BuildloggerURLs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildloggerURLs_jasper_2eproto.base);
  return *internal_default_instance();
}


void BuildloggerURLs::Clear() {
// @@protoc_insertion_point(message_clear_start:jasper.BuildloggerURLs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _internal_metadata_.Clear();
}

const char* BuildloggerURLs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jasper.BuildloggerURLs.urls"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildloggerURLs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jasper.BuildloggerURLs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jasper.BuildloggerURLs.urls");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jasper.BuildloggerURLs)
  return target;
}

size_t BuildloggerURLs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jasper.BuildloggerURLs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(urls_.size());
  for (int i = 0, n = urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      urls_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildloggerURLs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jasper.BuildloggerURLs)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildloggerURLs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildloggerURLs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jasper.BuildloggerURLs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jasper.BuildloggerURLs)
    MergeFrom(*source);
  }
}

void BuildloggerURLs::MergeFrom(const BuildloggerURLs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jasper.BuildloggerURLs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
}

void BuildloggerURLs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jasper.BuildloggerURLs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildloggerURLs::CopyFrom(const BuildloggerURLs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jasper.BuildloggerURLs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildloggerURLs::IsInitialized() const {
  return true;
}

void BuildloggerURLs::InternalSwap(BuildloggerURLs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  urls_.InternalSwap(&other->urls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildloggerURLs::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace jasper
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jasper::Logger* Arena::CreateMaybeMessage< ::jasper::Logger >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::Logger >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::OutputOptions* Arena::CreateMaybeMessage< ::jasper::OutputOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::OutputOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::LogOptions* Arena::CreateMaybeMessage< ::jasper::LogOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::LogOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::BufferOptions* Arena::CreateMaybeMessage< ::jasper::BufferOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::BufferOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::BuildloggerOptions* Arena::CreateMaybeMessage< ::jasper::BuildloggerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::BuildloggerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::SplunkOptions* Arena::CreateMaybeMessage< ::jasper::SplunkOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::SplunkOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::CreateOptions_EnvironmentEntry_DoNotUse* Arena::CreateMaybeMessage< ::jasper::CreateOptions_EnvironmentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::CreateOptions_EnvironmentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::CreateOptions* Arena::CreateMaybeMessage< ::jasper::CreateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::CreateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::ProcessInfo* Arena::CreateMaybeMessage< ::jasper::ProcessInfo >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::ProcessInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::StatusResponse* Arena::CreateMaybeMessage< ::jasper::StatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::Filter* Arena::CreateMaybeMessage< ::jasper::Filter >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::SignalProcess* Arena::CreateMaybeMessage< ::jasper::SignalProcess >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::SignalProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::TagName* Arena::CreateMaybeMessage< ::jasper::TagName >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::TagName >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::ProcessTags* Arena::CreateMaybeMessage< ::jasper::ProcessTags >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::ProcessTags >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::JasperProcessID* Arena::CreateMaybeMessage< ::jasper::JasperProcessID >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::JasperProcessID >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::OperationOutcome* Arena::CreateMaybeMessage< ::jasper::OperationOutcome >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::OperationOutcome >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::BuildOptions* Arena::CreateMaybeMessage< ::jasper::BuildOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::BuildOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::MongoDBDownloadOptions* Arena::CreateMaybeMessage< ::jasper::MongoDBDownloadOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::MongoDBDownloadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::CacheOptions* Arena::CreateMaybeMessage< ::jasper::CacheOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::CacheOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::ArchiveOptions* Arena::CreateMaybeMessage< ::jasper::ArchiveOptions >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::ArchiveOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::DownloadInfo* Arena::CreateMaybeMessage< ::jasper::DownloadInfo >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::DownloadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::jasper::BuildloggerURLs* Arena::CreateMaybeMessage< ::jasper::BuildloggerURLs >(Arena* arena) {
  return Arena::CreateInternal< ::jasper::BuildloggerURLs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
