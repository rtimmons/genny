#                        üßû    Genny   üßû‚Äç‚ôÄÔ∏è
#
# This file defines how this project is built by evergreen at
#
#   https://evergreen.mongodb.com/waterfall/genny
#
# 1. Indent using 2 spaces. Structures start on indents (e.g. dashes aren't
#    indented). Don't quote unnecessarily.
#
# 2.  Use `f_` prefix for function names and `t_` prefix for task names.
#
#     This allows
#
#     1.  grep for all usage of a function/task without colliding with
#         inline shell etc.
#     2.  grep for definition of a function `FOO` by grepping for `f_FOO:`
#         (with a colon)
#
# 3.  Put comments in yaml not in inline shell.
#
# 4.  Keep yaml anchors/aliases to a minimum and always prefix with `a_`
#     for similar grep-ability. Favor functions and tasks with
#     dependencies.
#
# 5.  Always use functions for all task-bodies and pre/post-bodies rather
#     than inlines. This keeps the overall logic separate from the
#     implementation.
#
# 6.  Maintain one blank line between each unit (each function, task,
#     variant etc). Two lines between each section.
#
# 7.  Don't change the order of the sections. Goal is to start with "entry
#     points" (variants) and then define children in breadth-first order.
#
# 8.  Functions that are non-obvious must have a comment with the existing
#     comment style.
#
# 9.  Any function that requires parameters or `${}`-style expansions must
#     document those parameters appropriately such that callers don't need
#     to read the function definition to figure out what they mean.
#
#                                                                       üßû‚Äç‚ôÄÔ∏è


##                ‚ö°Ô∏è Variants ‚ö°Ô∏è

ignore:
- "*.md"  # don't schedule tests if a commit only changes markdown files

buildvariants:
- name: amazon2
  display_name: Amazon Linux 2
  modules: ~
  run_on:
  - amazon2-build
  expansions:
    distro: amazon2
    # latest successful build from master as of 2020-10-01 on "Amazon Linux 2" compile task "Binaries" file
    # commit should match that in get-mongo-source.sh
    mongodb_archive_url:
      https://mciuploads.s3.amazonaws.com/mongodb-mongo-master/amazon2/298d4d6bbb9980b74bded06241067fe6771bef68/binaries/mongo-mongodb_mongo_master_amazon2_298d4d6bbb9980b74bded06241067fe6771bef68_20_10_22_00_55_19.tgz
  tasks:
  - name: tg_compile_and_test_with_server

# TODO: attach results & artifacts

- name: rhel70
  display_name: RHEL 7
  modules: ~
  expansions:
    distro: rhel70
  run_on:
  - rhel70
  tasks:
  - name: tg_compile

- name: rhel8
  display_name: RHEL 8
  modules: ~
  expansions:
    distro: rhel8
  run_on:
  - rhel80-test
  tasks:
  - name: tg_compile

- name: ubuntu1804
  display_name: Ubuntu 18.04
  modules: ~
  expansions:
    distro: ubuntu1804
  run_on:
  - ubuntu1804-build
  tasks:
  - name: tg_compile

- name: macos-1014
  display_name: macOS Mojave
  modules: ~
  run_on:
  - macos-1014
  tasks:
  - name: tg_compile

- name: centos6-perf
  display_name: CentOS 6 for Performance
  modules: ~
  expansions:
    distro: rhel62
  run_on:
  - centos6-perf
  tasks:
  - name: tg_compile_and_benchmark


##                ‚ö°Ô∏è Tasks ‚ö°Ô∏è

tasks:
- name: t_compile
  commands:
  - func: f_fetch_source
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - dry-run-workloads

- name: t_python_test
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - python-test

- name: t_lint_workloads
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - lint-workloads

- name: t_lint_python
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - lint-python

- name: t_cmake_test
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - cmake-test

- name: t_benchmark_test
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - benchmark-test

- name: t_resmoke_test_standalone
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - resmoke-test-standalone

- name: t_resmoke_test_single_node_replset
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - resmoke-test-single-node-replset

- name: t_resmoke_test_three_node_replset
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - resmoke-test-three-node-replset

- name: t_resmoke_test_sharded
  commands:
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - resmoke-test-sharded

- name: t_test_create_new_actor
  - command: subprocess.exec
    params:
      binary: /bin/bash
      args:
      - ./src/genny/lamp
      - test-create-new-actor

##                ‚ö°Ô∏è Task Groups ‚ö°Ô∏è

task_groups:

- &a_compile_and_test
  name: tg_compile_and_test
  max_hosts: 1
  tasks:
  # Rely on implicit dependencies in task_groups where tasks are executed
  # in the order they're defined. Tasks with explicit "depends_on" tasks
  # may conflict with task_group's implicit dependency, causing
  # unexpected behavior.
  #
  # For this task group, the implicit dependency is that t_*_test has to
  # run after t_compile.
  - t_compile
  - t_python_test
  - t_lint_python
  - t_lint_workloads
  - t_cmake_test

- <<: *a_compile_and_test
  name: tg_compile_and_benchmark
  tasks:
  - t_compile
  - t_benchmark_test

- <<: *a_compile_and_test
  name: tg_compile_and_test_with_server
  tasks:
  - t_compile
  - t_python_test
  - t_lint_python
  - t_cmake_test
  - t_resmoke_test_standalone
  - t_resmoke_test_single_node_replset
  - t_resmoke_test_three_node_replset
  - t_resmoke_test_standalone
  - t_test_create_new_actor  # Must run this task last.

- name: tg_compile
  max_hosts: 1
  tasks:
  - t_compile


##                ‚ö°Ô∏è Functions ‚ö°Ô∏è

functions:

  ##
  # Fetch into ./src/genny
  ##
  f_fetch_source:
  - command: git.get_project
    params:
      directory: src/genny
