#                        üßû    Genny   üßû‚Äç‚ôÄÔ∏è
#
# This file defines how this project is built by evergreen at
#
#   https://evergreen.mongodb.com/waterfall/genny
#
# 1. Indent using 2 spaces. Structures start on indents (e.g. dashes aren't
#    indented). Don't quote unnecessarily.
#
# 2.  Use `f_` prefix for function names and `t_` prefix for task names.
#
#     This allows
#
#     1.  grep for all usage of a function/task without colliding with
#         inline shell etc.
#     2.  grep for definition of a function `FOO` by grepping for `f_FOO:`
#         (with a colon)
#
# 3.  Put comments in yaml not in inline shell.
#
# 4.  Keep yaml anchors/aliases to a minimum and always prefix with `a_`
#     for similar grep-ability. Favor functions and tasks with
#     dependencies.
#
# 5.  Always use functions for all task-bodies and pre/post-bodies rather
#     than inlines. This keeps the overall logic separate from the
#     implementation.
#
# 6.  Maintain one blank line between each unit (each function, task,
#     variant etc). Two lines between each section.
#
# 7.  Don't change the order of the sections. Goal is to start with "entry
#     points" (variants) and then define children in breadth-first order.
#
# 8.  Functions that are non-obvious must have a comment with the existing
#     comment style.
#
# 9.  Any function that requires parameters or `${}`-style expansions must
#     document those parameters appropriately such that callers don't need
#     to read the function definition to figure out what they mean.
#
#                                                                       üßû‚Äç‚ôÄÔ∏è


##                ‚ö°Ô∏è Variants ‚ö°Ô∏è

ignore:
- "*.md" # don't schedule tests if a commit only changes markdown files

buildvariants:

- name: archlinux
  display_name: Arch Linux
  modules: ~
  run_on:
  - archlinux-test
  expansions:
    distro: archlinux
  tasks:
  - name: tg_compile_and_test
  - name: t_push

- name: amazon2
  display_name: Amazon Linux 2
  modules: ~
  run_on:
  - amazon2-build
  expansions:
    distro: amazon2
    mongodb_archive_url:
      https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-amazon2-4.1.7.tgz
  tasks:
  - name: tg_compile_and_test_with_server
  - name: t_push

- name: rhel70
  display_name: RHEL 7
  modules: ~
  expansions:
    distro: rhel70
  run_on:
  - rhel70
  tasks:
  - name: t_compile
  - name: t_push

- name: ubuntu1804
  display_name: Ubuntu 18.04
  modules: ~
  expansions:
    distro: ubuntu1804
  run_on:
  - ubuntu1804-build
  tasks:
  - name: t_compile
  - name: t_push

- name: macos-1014
  display_name: macOS Mojave
  modules: ~
  run_on:
  - macos-1014
  tasks:
  - name: t_rm_toolchain_dir_mac
  - name: t_compile
  - name: t_push


##                ‚ö°Ô∏è Tasks ‚ö°Ô∏è

tasks:
- name: t_compile
  commands:
  - func: f_fetch_source
  - func: f_compile
  - func: f_dry_run_workloads
  - func: f_push_patch
    vars:
      display_name: Genny
      short_name: genny
      install_dir: dist
- name: t_rm_toolchain_dir_mac
  commands:
  - func: f_rm_toolchain_dir_mac
- name: t_push
  depends_on: t_compile
  patchable: no
  commands:
  - func: f_push_official
    vars:
      display_name: Genny
      short_name: genny

- name: t_mongo_server
  commands:
  - func: f_checkout_mongodb

- name: t_python_test
  commands:
  - func: f_python_test

- name: t_cmake_test
  commands:
  - func: f_cmake_test

- name: t_integration_test_standalone
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_standalone.yml

- name: t_integration_test_single_node_replset
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_single_node_replset.yml

- name: t_integration_test_three_node_replset
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_three_node_replset.yml

- name: t_integration_test_sharded
  commands:
  - func: f_resmoke_test
    vars:
      resmoke_suite: genny_sharded.yml


##                ‚ö°Ô∏è Task Groups ‚ö°Ô∏è

task_groups:

- &a_compile_and_test
  name: tg_compile_and_test
  max_hosts: 1
  setup_task:
  - func: f_remove_test_results_files
  teardown_task:
  # Attaching results is prohibited in "teardown_group".
  # So we call it in "teardown_task" but make the result file optional.
  - func: f_report_test_results
  - func: f_remove_test_results_files
  tasks:
  # Rely on implicit dependencies in task_groups where tasks are executed
  # in the order they're defined. Tasks with explicit "depends_on" tasks
  # may conflict with task_group's implicit dependency, causing
  # unexpected behavior.
  #
  # For this task group, the implicit dependency is that t_*_test has to
  # run after t_compile.
  - t_compile
  - t_python_test
  - t_cmake_test

- <<: *a_compile_and_test
  name: tg_compile_and_test_with_server
  tasks:
  - t_compile
  - t_mongo_server
  - t_python_test
  - t_cmake_test
  - t_integration_test_standalone
  - t_integration_test_single_node_replset
  - t_integration_test_three_node_replset
  - t_integration_test_sharded


##                ‚ö°Ô∏è Functions ‚ö°Ô∏è

functions:

  f_fetch_source:
  - command: git.get_project
    params:
      directory: src

  ##
  # Download the mongodb binary and then clone and checkout the appropriate
  # mongodb repository branch that contains the intended gennylib test case
  # (SERVER-38646). Also installs resmoke dependencies.
  #
  # Expansions:
  #   mongodb_archive_url: url to download pre-compiled mongo from
  ##
  f_checkout_mongodb:
  - command: subprocess.exec
    params:
      working_dir: src
      binary: /bin/bash
      args:
        - "${workdir}/src/scripts/get-mongo-source.sh"
  - command: shell.exec
    params:
      working_dir: src/build/mongo
      shell: /bin/bash
      script: |
        set -euo pipefail
        curl -LSs "${mongodb_archive_url}" -o mongodb.tgz
        tar --strip-components=1 -zxvf mongodb.tgz

  f_rm_toolchain_dir_mac:
    - command: shell.exec
      params:
        shell: bash
        script: |
          rm -rf /data/mci/gennytoolchain

  ##
  # Archive an installed library into a tarball and upload it with
  # revision suffix.
  #
  # Expansions:
  #  install_dir: The directory in which this dependency was installed
  #  short_name: The name for the folder and prefix for the tarball to push
  #  display_name: The name to show in evergreen
  #  aws_key: aws key
  #  aws_secret: aws secret key
  #  project: evergreen project name (genny)
  #  build_id: evergreen build id
  ###
  f_push_patch:
  - command: archive.targz_pack
    params:
      source_dir: ${install_dir|dist}
      target: ${short_name}.tgz
      include:
      - "./**"
  - command: shell.exec
    params:
      working_dir: .
      shell: bash
      script: |
        set -o errexit
        # Make sure we have a file, give more info
        find . -iname *.tgz -exec stat {} \;
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: ${short_name}.tgz
      remote_file: ${project}/patches/${build_id}/${short_name}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: ${display_name} Patch

  ##
  # Copy the library tarball for a given revision to the official path
  #
  # Expansions:
  #  short_name: The name for the folder and prefix for the tarball to push
  #  display_name: The name to show in evergreen
  #  aws_key: aws key
  #  aws_secret: aws secret key
  #  project: evergreen project name (genny)
  #  build_id: evergreen build id
  #  build_variant: build variant (used in s3 path)
  ###
  f_push_official:
  - command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: ${short_name}.tgz
      remote_file: ${project}/patches/${build_id}/${short_name}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: ${short_name}.tgz
      remote_file:
        ${project}/${short_name}/${short_name}-${build_variant}-${revision}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: "${display_name} - ${revision}"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: ${short_name}.tgz
      remote_file: ${project}/${short_name}/${short_name}-${build_variant}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: ${display_name}

  ##
  # Compile the project in src/build.
  ##
  f_compile:
  - command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        set -o errexit
        set -o pipefail

        # for python3
        export PATH=/opt/mongodbtoolchain/v3/bin:$PATH

        export DEVELOPER_DIR="/Applications/Xcode10.1.app"

        ./scripts/lamp \
          -d=${distro|not-linux} \
          -DENABLE_JASPER:BOOL=ON \
          -DGENNY_INSTALL_DIR:PATH=${workdir}/dist \
          -DGENNY_INSTALL_SSL:BOOL=ON

  ##
  # Runs each workload as a dry run
  # Requires f_compile to have been run first.
  ##
  f_dry_run_workloads:
  - command: subprocess.exec
    params:
      working_dir: .
      binary: /bin/bash
      args:
      - ${workdir}/src/scripts/dry-run-workloads.sh
      env:
        GENNY: ${workdir}/dist/bin/genny

  ##
  # Runs tests via ctest.
  # Requires f_compile to have been run first.
  ##
  f_cmake_test:
  - command: shell.exec
    params:
      continue_on_err: true
      working_dir: src
      shell: bash
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        # for python3
        export PATH=/opt/mongodbtoolchain/v3/bin:$PATH

        ./scripts/lamp cmake-test

  ##
  # Runs tests via resmoke.
  # Requires f_compile to have been run first.
  ##
  f_resmoke_test:
  - command: subprocess.exec
    params:
      continue_on_err: true
      working_dir: src
      binary: /bin/bash
      args:
      - ${workdir}/src/scripts/run-resmoke.sh
      env:
        RESMOKE_SUITE: ${resmoke_suite}

  ##
  # Runs python nosetests.
  ##
  f_python_test:
  - command: shell.exec
    params:
      continue_on_err: true
      working_dir: src/src/python
      shell: bash
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        python3 setup.py nosetests

  ##
  # Reports test results to evergreen API.
  #
  # If you add a new file to this list, then you should also
  # add it to the `f_remove_test_results_files` function to
  # ensure it is cleaned up between tasks in the task group.
  ##
  f_report_test_results:
  - command: attach.xunit_results
    params:
      optional: true
      file: src/build/src/*/*.junit.xml
  - command: attach.xunit_results
    params:
      optional: true
      file: src/build/*.junit.xml
  - command: attach.xunit_results
    params:
      optional: true
      file: src/src/python/nosetests.xml

  ##
  # Removes the test results files from the local filesystem.
  ##
  f_remove_test_results_files:
  - command: shell.exec
    params:
      shell: bash
      script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        rm -f \
        src/build/*.junit.xml \
        src/build/src/*/*.junit.xml \
        src/src/python/nosetests.xml
